-- ./src/tools/cbindgen.cy -o src/tools/llvm.cy src/tools/llvm.h -I/opt/homebrew/Cellar/llvm/17.0.5/include -libpath /opt/homebrew/Cellar/llvm/17.0.5/lib/libLLVM.dylib -stripPrefix LLVM

-- CBINDGEN MARKER
-- Code below is generated by cbindgen.cy
type FatalErrorHandler pointer

func InstallFatalErrorHandler(Handler any) none: pass
func ResetFatalErrorHandler() none: pass
func EnablePrettyStackTrace() none: pass
type Bool int

type MemoryBufferRef pointer

type ContextRef pointer

type ModuleRef pointer

type TypeRef pointer

type ValueRef pointer

type BasicBlockRef pointer

type MetadataRef pointer

type NamedMDNodeRef pointer

type ValueMetadataEntry LLVMOpaqueValueMetadataEntry

type BuilderRef pointer

type DIBuilderRef pointer

type ModuleProviderRef pointer

type PassManagerRef pointer

type UseRef pointer

type AttributeRef pointer

type DiagnosticInfoRef pointer

type ComdatRef pointer

type ModuleFlagEntry LLVMOpaqueModuleFlagEntry

type JITEventListenerRef pointer

type BinaryRef pointer

var Root.Ret int = 1
var Root.Br int = 2
var Root.Switch int = 3
var Root.IndirectBr int = 4
var Root.Invoke int = 5
var Root.Unreachable int = 7
var Root.CallBr int = 67
var Root.FNeg int = 66
var Root.Add int = 8
var Root.FAdd int = 9
var Root.Sub int = 10
var Root.FSub int = 11
var Root.Mul int = 12
var Root.FMul int = 13
var Root.UDiv int = 14
var Root.SDiv int = 15
var Root.FDiv int = 16
var Root.URem int = 17
var Root.SRem int = 18
var Root.FRem int = 19
var Root.Shl int = 20
var Root.LShr int = 21
var Root.AShr int = 22
var Root.And int = 23
var Root.Or int = 24
var Root.Xor int = 25
var Root.Alloca int = 26
var Root.Load int = 27
var Root.Store int = 28
var Root.GetElementPtr int = 29
var Root.Trunc int = 30
var Root.ZExt int = 31
var Root.SExt int = 32
var Root.FPToUI int = 33
var Root.FPToSI int = 34
var Root.UIToFP int = 35
var Root.SIToFP int = 36
var Root.FPTrunc int = 37
var Root.FPExt int = 38
var Root.PtrToInt int = 39
var Root.IntToPtr int = 40
var Root.BitCast int = 41
var Root.AddrSpaceCast int = 60
var Root.ICmp int = 42
var Root.FCmp int = 43
var Root.PHI int = 44
var Root.Call int = 45
var Root.Select int = 46
var Root.UserOp1 int = 47
var Root.UserOp2 int = 48
var Root.VAArg int = 49
var Root.ExtractElement int = 50
var Root.InsertElement int = 51
var Root.ShuffleVector int = 52
var Root.ExtractValue int = 53
var Root.InsertValue int = 54
var Root.Freeze int = 68
var Root.Fence int = 55
var Root.AtomicCmpXchg int = 56
var Root.AtomicRMW int = 57
var Root.Resume int = 58
var Root.LandingPad int = 59
var Root.CleanupRet int = 61
var Root.CatchRet int = 62
var Root.CatchPad int = 63
var Root.CleanupPad int = 64
var Root.CatchSwitch int = 65

var Root.VoidTypeKind int = 0
var Root.HalfTypeKind int = 1
var Root.FloatTypeKind int = 2
var Root.DoubleTypeKind int = 3
var Root.X86_FP80TypeKind int = 4
var Root.FP128TypeKind int = 5
var Root.PPC_FP128TypeKind int = 6
var Root.LabelTypeKind int = 7
var Root.IntegerTypeKind int = 8
var Root.FunctionTypeKind int = 9
var Root.StructTypeKind int = 10
var Root.ArrayTypeKind int = 11
var Root.PointerTypeKind int = 12
var Root.VectorTypeKind int = 13
var Root.MetadataTypeKind int = 14
var Root.X86_MMXTypeKind int = 15
var Root.TokenTypeKind int = 16
var Root.ScalableVectorTypeKind int = 17
var Root.BFloatTypeKind int = 18
var Root.X86_AMXTypeKind int = 19
var Root.TargetExtTypeKind int = 20

var Root.ExternalLinkage int = 0
var Root.AvailableExternallyLinkage int = 1
var Root.LinkOnceAnyLinkage int = 2
var Root.LinkOnceODRLinkage int = 3
var Root.LinkOnceODRAutoHideLinkage int = 4
var Root.WeakAnyLinkage int = 5
var Root.WeakODRLinkage int = 6
var Root.AppendingLinkage int = 7
var Root.InternalLinkage int = 8
var Root.PrivateLinkage int = 9
var Root.DLLImportLinkage int = 10
var Root.DLLExportLinkage int = 11
var Root.ExternalWeakLinkage int = 12
var Root.GhostLinkage int = 13
var Root.CommonLinkage int = 14
var Root.LinkerPrivateLinkage int = 15
var Root.LinkerPrivateWeakLinkage int = 16

var Root.DefaultVisibility int = 0
var Root.HiddenVisibility int = 1
var Root.ProtectedVisibility int = 2

var Root.NoUnnamedAddr int = 0
var Root.LocalUnnamedAddr int = 1
var Root.GlobalUnnamedAddr int = 2

var Root.DefaultStorageClass int = 0
var Root.DLLImportStorageClass int = 1
var Root.DLLExportStorageClass int = 2

var Root.CCallConv int = 0
var Root.FastCallConv int = 8
var Root.ColdCallConv int = 9
var Root.GHCCallConv int = 10
var Root.HiPECallConv int = 11
var Root.WebKitJSCallConv int = 12
var Root.AnyRegCallConv int = 13
var Root.PreserveMostCallConv int = 14
var Root.PreserveAllCallConv int = 15
var Root.SwiftCallConv int = 16
var Root.CXXFASTTLSCallConv int = 17
var Root.X86StdcallCallConv int = 64
var Root.X86FastcallCallConv int = 65
var Root.ARMAPCSCallConv int = 66
var Root.ARMAAPCSCallConv int = 67
var Root.ARMAAPCSVFPCallConv int = 68
var Root.MSP430INTRCallConv int = 69
var Root.X86ThisCallCallConv int = 70
var Root.PTXKernelCallConv int = 71
var Root.PTXDeviceCallConv int = 72
var Root.SPIRFUNCCallConv int = 75
var Root.SPIRKERNELCallConv int = 76
var Root.IntelOCLBICallConv int = 77
var Root.X8664SysVCallConv int = 78
var Root.Win64CallConv int = 79
var Root.X86VectorCallCallConv int = 80
var Root.HHVMCallConv int = 81
var Root.HHVMCCallConv int = 82
var Root.X86INTRCallConv int = 83
var Root.AVRINTRCallConv int = 84
var Root.AVRSIGNALCallConv int = 85
var Root.AVRBUILTINCallConv int = 86
var Root.AMDGPUVSCallConv int = 87
var Root.AMDGPUGSCallConv int = 88
var Root.AMDGPUPSCallConv int = 89
var Root.AMDGPUCSCallConv int = 90
var Root.AMDGPUKERNELCallConv int = 91
var Root.X86RegCallCallConv int = 92
var Root.AMDGPUHSCallConv int = 93
var Root.MSP430BUILTINCallConv int = 94
var Root.AMDGPULSCallConv int = 95
var Root.AMDGPUESCallConv int = 96

var Root.ArgumentValueKind int = 0
var Root.BasicBlockValueKind int = 1
var Root.MemoryUseValueKind int = 2
var Root.MemoryDefValueKind int = 3
var Root.MemoryPhiValueKind int = 4
var Root.FunctionValueKind int = 5
var Root.GlobalAliasValueKind int = 6
var Root.GlobalIFuncValueKind int = 7
var Root.GlobalVariableValueKind int = 8
var Root.BlockAddressValueKind int = 9
var Root.ConstantExprValueKind int = 10
var Root.ConstantArrayValueKind int = 11
var Root.ConstantStructValueKind int = 12
var Root.ConstantVectorValueKind int = 13
var Root.UndefValueValueKind int = 14
var Root.ConstantAggregateZeroValueKind int = 15
var Root.ConstantDataArrayValueKind int = 16
var Root.ConstantDataVectorValueKind int = 17
var Root.ConstantIntValueKind int = 18
var Root.ConstantFPValueKind int = 19
var Root.ConstantPointerNullValueKind int = 20
var Root.ConstantTokenNoneValueKind int = 21
var Root.MetadataAsValueValueKind int = 22
var Root.InlineAsmValueKind int = 23
var Root.InstructionValueKind int = 24
var Root.PoisonValueValueKind int = 25
var Root.ConstantTargetNoneValueKind int = 26

var Root.IntEQ int = 32
var Root.IntNE int = 33
var Root.IntUGT int = 34
var Root.IntUGE int = 35
var Root.IntULT int = 36
var Root.IntULE int = 37
var Root.IntSGT int = 38
var Root.IntSGE int = 39
var Root.IntSLT int = 40
var Root.IntSLE int = 41

var Root.RealPredicateFalse int = 0
var Root.RealOEQ int = 1
var Root.RealOGT int = 2
var Root.RealOGE int = 3
var Root.RealOLT int = 4
var Root.RealOLE int = 5
var Root.RealONE int = 6
var Root.RealORD int = 7
var Root.RealUNO int = 8
var Root.RealUEQ int = 9
var Root.RealUGT int = 10
var Root.RealUGE int = 11
var Root.RealULT int = 12
var Root.RealULE int = 13
var Root.RealUNE int = 14
var Root.RealPredicateTrue int = 15

var Root.LandingPadCatch int = 0
var Root.LandingPadFilter int = 1

var Root.NotThreadLocal int = 0
var Root.GeneralDynamicTLSModel int = 1
var Root.LocalDynamicTLSModel int = 2
var Root.InitialExecTLSModel int = 3
var Root.LocalExecTLSModel int = 4

var Root.AtomicOrderingNotAtomic int = 0
var Root.AtomicOrderingUnordered int = 1
var Root.AtomicOrderingMonotonic int = 2
var Root.AtomicOrderingAcquire int = 4
var Root.AtomicOrderingRelease int = 5
var Root.AtomicOrderingAcquireRelease int = 6
var Root.AtomicOrderingSequentiallyConsistent int = 7

var Root.AtomicRMWBinOpXchg int = 0
var Root.AtomicRMWBinOpAdd int = 1
var Root.AtomicRMWBinOpSub int = 2
var Root.AtomicRMWBinOpAnd int = 3
var Root.AtomicRMWBinOpNand int = 4
var Root.AtomicRMWBinOpOr int = 5
var Root.AtomicRMWBinOpXor int = 6
var Root.AtomicRMWBinOpMax int = 7
var Root.AtomicRMWBinOpMin int = 8
var Root.AtomicRMWBinOpUMax int = 9
var Root.AtomicRMWBinOpUMin int = 10
var Root.AtomicRMWBinOpFAdd int = 11
var Root.AtomicRMWBinOpFSub int = 12
var Root.AtomicRMWBinOpFMax int = 13
var Root.AtomicRMWBinOpFMin int = 14

var Root.DSError int = 0
var Root.DSWarning int = 1
var Root.DSRemark int = 2
var Root.DSNote int = 3

var Root.InlineAsmDialectATT int = 0
var Root.InlineAsmDialectIntel int = 1

var Root.ModuleFlagBehaviorError int = 0
var Root.ModuleFlagBehaviorWarning int = 1
var Root.ModuleFlagBehaviorRequire int = 2
var Root.ModuleFlagBehaviorOverride int = 3
var Root.ModuleFlagBehaviorAppend int = 4
var Root.ModuleFlagBehaviorAppendUnique int = 5

var Root.AttributeReturnIndex int = 0
var Root.AttributeFunctionIndex int = -1

type AttributeIndex int

func Shutdown() none: pass
func GetVersion(Major any, Minor any, Patch any) none: pass
func CreateMessage(Message any) pointer: pass
func DisposeMessage(Message any) none: pass
type DiagnosticHandler pointer

type YieldCallback pointer

func ContextCreate() pointer: pass
func GetGlobalContext() pointer: pass
func ContextSetDiagnosticHandler(C any, Handler any, DiagnosticContext any) none: pass
func ContextGetDiagnosticHandler(C any) pointer: pass
func ContextGetDiagnosticContext(C any) pointer: pass
func ContextSetYieldCallback(C any, Callback any, OpaqueHandle any) none: pass
func ContextShouldDiscardValueNames(C any) int: pass
func ContextSetDiscardValueNames(C any, Discard int) none: pass
func ContextDispose(C any) none: pass
func GetDiagInfoDescription(DI any) pointer: pass
func GetDiagInfoSeverity(DI any) int: pass
func GetMDKindIDInContext(C any, Name any, SLen int) int: pass
func GetMDKindID(Name any, SLen int) int: pass
func GetEnumAttributeKindForName(Name any, SLen int) int: pass
func GetLastEnumAttributeKind() int: pass
func CreateEnumAttribute(C any, KindID int, Val int) pointer: pass
func GetEnumAttributeKind(A any) int: pass
func GetEnumAttributeValue(A any) int: pass
func CreateTypeAttribute(C any, KindID int, type_ref any) pointer: pass
func GetTypeAttributeValue(A any) pointer: pass
func CreateStringAttribute(C any, K any, KLength int, V any, VLength int) pointer: pass
func GetStringAttributeKind(A any, Length any) pointer: pass
func GetStringAttributeValue(A any, Length any) pointer: pass
func IsEnumAttribute(A any) int: pass
func IsStringAttribute(A any) int: pass
func IsTypeAttribute(A any) int: pass
func GetTypeByName2(C any, Name any) pointer: pass
func ModuleCreateWithName(ModuleID any) pointer: pass
func ModuleCreateWithNameInContext(ModuleID any, C any) pointer: pass
func CloneModule(M any) pointer: pass
func DisposeModule(M any) none: pass
func GetModuleIdentifier(M any, Len any) pointer: pass
func SetModuleIdentifier(M any, Ident any, Len int) none: pass
func GetSourceFileName(M any, Len any) pointer: pass
func SetSourceFileName(M any, Name any, Len int) none: pass
func GetDataLayoutStr(M any) pointer: pass
func GetDataLayout(M any) pointer: pass
func SetDataLayout(M any, DataLayoutStr any) none: pass
func GetTarget(M any) pointer: pass
func SetTarget(M any, Triple any) none: pass
func CopyModuleFlagsMetadata(M any, Len any) pointer: pass
func DisposeModuleFlagsMetadata(Entries any) none: pass
func ModuleFlagEntriesGetFlagBehavior(Entries any, Index int) int: pass
func ModuleFlagEntriesGetKey(Entries any, Index int, Len any) pointer: pass
func ModuleFlagEntriesGetMetadata(Entries any, Index int) pointer: pass
func GetModuleFlag(M any, Key any, KeyLen int) pointer: pass
func AddModuleFlag(M any, Behavior int, Key any, KeyLen int, Val any) none: pass
func DumpModule(M any) none: pass
func PrintModuleToFile(M any, Filename any, ErrorMessage any) int: pass
func PrintModuleToString(M any) pointer: pass
func GetModuleInlineAsm(M any, Len any) pointer: pass
func SetModuleInlineAsm2(M any, Asm any, Len int) none: pass
func AppendModuleInlineAsm(M any, Asm any, Len int) none: pass
func GetInlineAsm(Ty any, AsmString any, AsmStringSize int, Constraints any, ConstraintsSize int, HasSideEffects int, IsAlignStack int, Dialect int, CanThrow int) pointer: pass
func GetModuleContext(M any) pointer: pass
func GetTypeByName(M any, Name any) pointer: pass
func GetFirstNamedMetadata(M any) pointer: pass
func GetLastNamedMetadata(M any) pointer: pass
func GetNextNamedMetadata(NamedMDNode any) pointer: pass
func GetPreviousNamedMetadata(NamedMDNode any) pointer: pass
func GetNamedMetadata(M any, Name any, NameLen int) pointer: pass
func GetOrInsertNamedMetadata(M any, Name any, NameLen int) pointer: pass
func GetNamedMetadataName(NamedMD any, NameLen any) pointer: pass
func GetNamedMetadataNumOperands(M any, Name any) int: pass
func GetNamedMetadataOperands(M any, Name any, Dest any) none: pass
func AddNamedMetadataOperand(M any, Name any, Val any) none: pass
func GetDebugLocDirectory(Val any, Length any) pointer: pass
func GetDebugLocFilename(Val any, Length any) pointer: pass
func GetDebugLocLine(Val any) int: pass
func GetDebugLocColumn(Val any) int: pass
func AddFunction(M any, Name any, FunctionTy any) pointer: pass
func GetNamedFunction(M any, Name any) pointer: pass
func GetFirstFunction(M any) pointer: pass
func GetLastFunction(M any) pointer: pass
func GetNextFunction(Fn any) pointer: pass
func GetPreviousFunction(Fn any) pointer: pass
func SetModuleInlineAsm(M any, Asm any) none: pass
func GetTypeKind(Ty any) int: pass
func TypeIsSized(Ty any) int: pass
func GetTypeContext(Ty any) pointer: pass
func DumpType(Val any) none: pass
func PrintTypeToString(Val any) pointer: pass
func Int1TypeInContext(C any) pointer: pass
func Int8TypeInContext(C any) pointer: pass
func Int16TypeInContext(C any) pointer: pass
func Int32TypeInContext(C any) pointer: pass
func Int64TypeInContext(C any) pointer: pass
func Int128TypeInContext(C any) pointer: pass
func IntTypeInContext(C any, NumBits int) pointer: pass
func Int1Type() pointer: pass
func Int8Type() pointer: pass
func Int16Type() pointer: pass
func Int32Type() pointer: pass
func Int64Type() pointer: pass
func Int128Type() pointer: pass
func IntType(NumBits int) pointer: pass
func GetIntTypeWidth(IntegerTy any) int: pass
func HalfTypeInContext(C any) pointer: pass
func BFloatTypeInContext(C any) pointer: pass
func FloatTypeInContext(C any) pointer: pass
func DoubleTypeInContext(C any) pointer: pass
func X86FP80TypeInContext(C any) pointer: pass
func FP128TypeInContext(C any) pointer: pass
func PPCFP128TypeInContext(C any) pointer: pass
func HalfType() pointer: pass
func BFloatType() pointer: pass
func FloatType() pointer: pass
func DoubleType() pointer: pass
func X86FP80Type() pointer: pass
func FP128Type() pointer: pass
func PPCFP128Type() pointer: pass
func FunctionType(ReturnType any, ParamTypes any, ParamCount int, IsVarArg int) pointer: pass
func IsFunctionVarArg(FunctionTy any) int: pass
func GetReturnType(FunctionTy any) pointer: pass
func CountParamTypes(FunctionTy any) int: pass
func GetParamTypes(FunctionTy any, Dest any) none: pass
func StructTypeInContext(C any, ElementTypes any, ElementCount int, Packed int) pointer: pass
func StructType(ElementTypes any, ElementCount int, Packed int) pointer: pass
func StructCreateNamed(C any, Name any) pointer: pass
func GetStructName(Ty any) pointer: pass
func StructSetBody(StructTy any, ElementTypes any, ElementCount int, Packed int) none: pass
func CountStructElementTypes(StructTy any) int: pass
func GetStructElementTypes(StructTy any, Dest any) none: pass
func StructGetTypeAtIndex(StructTy any, i int) pointer: pass
func IsPackedStruct(StructTy any) int: pass
func IsOpaqueStruct(StructTy any) int: pass
func IsLiteralStruct(StructTy any) int: pass
func GetElementType(Ty any) pointer: pass
func GetSubtypes(Tp any, Arr any) none: pass
func GetNumContainedTypes(Tp any) int: pass
func ArrayType(ElementType any, ElementCount int) pointer: pass
func ArrayType2(ElementType any, ElementCount int) pointer: pass
func GetArrayLength(ArrayTy any) int: pass
func GetArrayLength2(ArrayTy any) int: pass
func PointerType(ElementType any, AddressSpace int) pointer: pass
func PointerTypeIsOpaque(Ty any) int: pass
func PointerTypeInContext(C any, AddressSpace int) pointer: pass
func GetPointerAddressSpace(PointerTy any) int: pass
func VectorType(ElementType any, ElementCount int) pointer: pass
func ScalableVectorType(ElementType any, ElementCount int) pointer: pass
func GetVectorSize(VectorTy any) int: pass
func VoidTypeInContext(C any) pointer: pass
func LabelTypeInContext(C any) pointer: pass
func X86MMXTypeInContext(C any) pointer: pass
func X86AMXTypeInContext(C any) pointer: pass
func TokenTypeInContext(C any) pointer: pass
func MetadataTypeInContext(C any) pointer: pass
func VoidType() pointer: pass
func LabelType() pointer: pass
func X86MMXType() pointer: pass
func X86AMXType() pointer: pass
func TargetExtTypeInContext(C any, Name any, TypeParams any, TypeParamCount int, IntParams any, IntParamCount int) pointer: pass
func TypeOf(Val any) pointer: pass
func GetValueKind(Val any) int: pass
func GetValueName2(Val any, Length any) pointer: pass
func SetValueName2(Val any, Name any, NameLen int) none: pass
func DumpValue(Val any) none: pass
func PrintValueToString(Val any) pointer: pass
func ReplaceAllUsesWith(OldVal any, NewVal any) none: pass
func IsConstant(Val any) int: pass
func IsUndef(Val any) int: pass
func IsPoison(Val any) int: pass
func IsAArgument(Val any) pointer: pass
func IsABasicBlock(Val any) pointer: pass
func IsAInlineAsm(Val any) pointer: pass
func IsAUser(Val any) pointer: pass
func IsAConstant(Val any) pointer: pass
func IsABlockAddress(Val any) pointer: pass
func IsAConstantAggregateZero(Val any) pointer: pass
func IsAConstantArray(Val any) pointer: pass
func IsAConstantDataSequential(Val any) pointer: pass
func IsAConstantDataArray(Val any) pointer: pass
func IsAConstantDataVector(Val any) pointer: pass
func IsAConstantExpr(Val any) pointer: pass
func IsAConstantFP(Val any) pointer: pass
func IsAConstantInt(Val any) pointer: pass
func IsAConstantPointerNull(Val any) pointer: pass
func IsAConstantStruct(Val any) pointer: pass
func IsAConstantTokenNone(Val any) pointer: pass
func IsAConstantVector(Val any) pointer: pass
func IsAGlobalValue(Val any) pointer: pass
func IsAGlobalAlias(Val any) pointer: pass
func IsAGlobalObject(Val any) pointer: pass
func IsAFunction(Val any) pointer: pass
func IsAGlobalVariable(Val any) pointer: pass
func IsAGlobalIFunc(Val any) pointer: pass
func IsAUndefValue(Val any) pointer: pass
func IsAPoisonValue(Val any) pointer: pass
func IsAInstruction(Val any) pointer: pass
func IsAUnaryOperator(Val any) pointer: pass
func IsABinaryOperator(Val any) pointer: pass
func IsACallInst(Val any) pointer: pass
func IsAIntrinsicInst(Val any) pointer: pass
func IsADbgInfoIntrinsic(Val any) pointer: pass
func IsADbgVariableIntrinsic(Val any) pointer: pass
func IsADbgDeclareInst(Val any) pointer: pass
func IsADbgLabelInst(Val any) pointer: pass
func IsAMemIntrinsic(Val any) pointer: pass
func IsAMemCpyInst(Val any) pointer: pass
func IsAMemMoveInst(Val any) pointer: pass
func IsAMemSetInst(Val any) pointer: pass
func IsACmpInst(Val any) pointer: pass
func IsAFCmpInst(Val any) pointer: pass
func IsAICmpInst(Val any) pointer: pass
func IsAExtractElementInst(Val any) pointer: pass
func IsAGetElementPtrInst(Val any) pointer: pass
func IsAInsertElementInst(Val any) pointer: pass
func IsAInsertValueInst(Val any) pointer: pass
func IsALandingPadInst(Val any) pointer: pass
func IsAPHINode(Val any) pointer: pass
func IsASelectInst(Val any) pointer: pass
func IsAShuffleVectorInst(Val any) pointer: pass
func IsAStoreInst(Val any) pointer: pass
func IsABranchInst(Val any) pointer: pass
func IsAIndirectBrInst(Val any) pointer: pass
func IsAInvokeInst(Val any) pointer: pass
func IsAReturnInst(Val any) pointer: pass
func IsASwitchInst(Val any) pointer: pass
func IsAUnreachableInst(Val any) pointer: pass
func IsAResumeInst(Val any) pointer: pass
func IsACleanupReturnInst(Val any) pointer: pass
func IsACatchReturnInst(Val any) pointer: pass
func IsACatchSwitchInst(Val any) pointer: pass
func IsACallBrInst(Val any) pointer: pass
func IsAFuncletPadInst(Val any) pointer: pass
func IsACatchPadInst(Val any) pointer: pass
func IsACleanupPadInst(Val any) pointer: pass
func IsAUnaryInstruction(Val any) pointer: pass
func IsAAllocaInst(Val any) pointer: pass
func IsACastInst(Val any) pointer: pass
func IsAAddrSpaceCastInst(Val any) pointer: pass
func IsABitCastInst(Val any) pointer: pass
func IsAFPExtInst(Val any) pointer: pass
func IsAFPToSIInst(Val any) pointer: pass
func IsAFPToUIInst(Val any) pointer: pass
func IsAFPTruncInst(Val any) pointer: pass
func IsAIntToPtrInst(Val any) pointer: pass
func IsAPtrToIntInst(Val any) pointer: pass
func IsASExtInst(Val any) pointer: pass
func IsASIToFPInst(Val any) pointer: pass
func IsATruncInst(Val any) pointer: pass
func IsAUIToFPInst(Val any) pointer: pass
func IsAZExtInst(Val any) pointer: pass
func IsAExtractValueInst(Val any) pointer: pass
func IsALoadInst(Val any) pointer: pass
func IsAVAArgInst(Val any) pointer: pass
func IsAFreezeInst(Val any) pointer: pass
func IsAAtomicCmpXchgInst(Val any) pointer: pass
func IsAAtomicRMWInst(Val any) pointer: pass
func IsAFenceInst(Val any) pointer: pass
func IsAMDNode(Val any) pointer: pass
func IsAValueAsMetadata(Val any) pointer: pass
func IsAMDString(Val any) pointer: pass
func GetValueName(Val any) pointer: pass
func SetValueName(Val any, Name any) none: pass
func GetFirstUse(Val any) pointer: pass
func GetNextUse(U any) pointer: pass
func GetUser(U any) pointer: pass
func GetUsedValue(U any) pointer: pass
func GetOperand(Val any, Index int) pointer: pass
func GetOperandUse(Val any, Index int) pointer: pass
func SetOperand(User any, Index int, Val any) none: pass
func GetNumOperands(Val any) int: pass
func ConstNull(Ty any) pointer: pass
func ConstAllOnes(Ty any) pointer: pass
func GetUndef(Ty any) pointer: pass
func GetPoison(Ty any) pointer: pass
func IsNull(Val any) int: pass
func ConstPointerNull(Ty any) pointer: pass
func ConstInt(IntTy any, N int, SignExtend int) pointer: pass
func ConstIntOfArbitraryPrecision(IntTy any, NumWords int, Words any) pointer: pass
func ConstIntOfString(IntTy any, Text any, Radix int) pointer: pass
func ConstIntOfStringAndSize(IntTy any, Text any, SLen int, Radix int) pointer: pass
func ConstReal(RealTy any, N float) pointer: pass
func ConstRealOfString(RealTy any, Text any) pointer: pass
func ConstRealOfStringAndSize(RealTy any, Text any, SLen int) pointer: pass
func ConstIntGetZExtValue(ConstantVal any) int: pass
func ConstIntGetSExtValue(ConstantVal any) int: pass
func ConstRealGetDouble(ConstantVal any, losesInfo any) float: pass
func ConstStringInContext(C any, Str any, Length int, DontNullTerminate int) pointer: pass
func ConstString(Str any, Length int, DontNullTerminate int) pointer: pass
func IsConstantString(c any) int: pass
func GetAsString(c any, Length any) pointer: pass
func ConstStructInContext(C any, ConstantVals any, Count int, Packed int) pointer: pass
func ConstStruct(ConstantVals any, Count int, Packed int) pointer: pass
func ConstArray(ElementTy any, ConstantVals any, Length int) pointer: pass
func ConstArray2(ElementTy any, ConstantVals any, Length int) pointer: pass
func ConstNamedStruct(StructTy any, ConstantVals any, Count int) pointer: pass
func GetAggregateElement(C any, Idx int) pointer: pass
func GetElementAsConstant(C any, idx int) pointer: pass
func ConstVector(ScalarConstantVals any, Size int) pointer: pass
func GetConstOpcode(ConstantVal any) int: pass
func AlignOf(Ty any) pointer: pass
func SizeOf(Ty any) pointer: pass
func ConstNeg(ConstantVal any) pointer: pass
func ConstNSWNeg(ConstantVal any) pointer: pass
func ConstNUWNeg(ConstantVal any) pointer: pass
func ConstNot(ConstantVal any) pointer: pass
func ConstAdd(LHSConstant any, RHSConstant any) pointer: pass
func ConstNSWAdd(LHSConstant any, RHSConstant any) pointer: pass
func ConstNUWAdd(LHSConstant any, RHSConstant any) pointer: pass
func ConstSub(LHSConstant any, RHSConstant any) pointer: pass
func ConstNSWSub(LHSConstant any, RHSConstant any) pointer: pass
func ConstNUWSub(LHSConstant any, RHSConstant any) pointer: pass
func ConstMul(LHSConstant any, RHSConstant any) pointer: pass
func ConstNSWMul(LHSConstant any, RHSConstant any) pointer: pass
func ConstNUWMul(LHSConstant any, RHSConstant any) pointer: pass
func ConstAnd(LHSConstant any, RHSConstant any) pointer: pass
func ConstOr(LHSConstant any, RHSConstant any) pointer: pass
func ConstXor(LHSConstant any, RHSConstant any) pointer: pass
func ConstICmp(Predicate int, LHSConstant any, RHSConstant any) pointer: pass
func ConstFCmp(Predicate int, LHSConstant any, RHSConstant any) pointer: pass
func ConstShl(LHSConstant any, RHSConstant any) pointer: pass
func ConstLShr(LHSConstant any, RHSConstant any) pointer: pass
func ConstAShr(LHSConstant any, RHSConstant any) pointer: pass
func ConstGEP2(Ty any, ConstantVal any, ConstantIndices any, NumIndices int) pointer: pass
func ConstInBoundsGEP2(Ty any, ConstantVal any, ConstantIndices any, NumIndices int) pointer: pass
func ConstTrunc(ConstantVal any, ToType any) pointer: pass
func ConstSExt(ConstantVal any, ToType any) pointer: pass
func ConstZExt(ConstantVal any, ToType any) pointer: pass
func ConstFPTrunc(ConstantVal any, ToType any) pointer: pass
func ConstFPExt(ConstantVal any, ToType any) pointer: pass
func ConstUIToFP(ConstantVal any, ToType any) pointer: pass
func ConstSIToFP(ConstantVal any, ToType any) pointer: pass
func ConstFPToUI(ConstantVal any, ToType any) pointer: pass
func ConstFPToSI(ConstantVal any, ToType any) pointer: pass
func ConstPtrToInt(ConstantVal any, ToType any) pointer: pass
func ConstIntToPtr(ConstantVal any, ToType any) pointer: pass
func ConstBitCast(ConstantVal any, ToType any) pointer: pass
func ConstAddrSpaceCast(ConstantVal any, ToType any) pointer: pass
func ConstZExtOrBitCast(ConstantVal any, ToType any) pointer: pass
func ConstSExtOrBitCast(ConstantVal any, ToType any) pointer: pass
func ConstTruncOrBitCast(ConstantVal any, ToType any) pointer: pass
func ConstPointerCast(ConstantVal any, ToType any) pointer: pass
func ConstIntCast(ConstantVal any, ToType any, isSigned int) pointer: pass
func ConstFPCast(ConstantVal any, ToType any) pointer: pass
func ConstExtractElement(VectorConstant any, IndexConstant any) pointer: pass
func ConstInsertElement(VectorConstant any, ElementValueConstant any, IndexConstant any) pointer: pass
func ConstShuffleVector(VectorAConstant any, VectorBConstant any, MaskConstant any) pointer: pass
func BlockAddress(F any, BB any) pointer: pass
func ConstInlineAsm(Ty any, AsmString any, Constraints any, HasSideEffects int, IsAlignStack int) pointer: pass
func GetGlobalParent(Global any) pointer: pass
func IsDeclaration(Global any) int: pass
func GetLinkage(Global any) int: pass
func SetLinkage(Global any, Linkage int) none: pass
func GetSection(Global any) pointer: pass
func SetSection(Global any, Section any) none: pass
func GetVisibility(Global any) int: pass
func SetVisibility(Global any, Viz int) none: pass
func GetDLLStorageClass(Global any) int: pass
func SetDLLStorageClass(Global any, Class int) none: pass
func GetUnnamedAddress(Global any) int: pass
func SetUnnamedAddress(Global any, UnnamedAddr int) none: pass
func GlobalGetValueType(Global any) pointer: pass
func HasUnnamedAddr(Global any) int: pass
func SetUnnamedAddr(Global any, HasUnnamedAddr int) none: pass
func GetAlignment(V any) int: pass
func SetAlignment(V any, Bytes int) none: pass
func GlobalSetMetadata(Global any, Kind int, MD any) none: pass
func GlobalEraseMetadata(Global any, Kind int) none: pass
func GlobalClearMetadata(Global any) none: pass
func GlobalCopyAllMetadata(Value any, NumEntries any) pointer: pass
func DisposeValueMetadataEntries(Entries any) none: pass
func ValueMetadataEntriesGetKind(Entries any, Index int) int: pass
func ValueMetadataEntriesGetMetadata(Entries any, Index int) pointer: pass
func AddGlobal(M any, Ty any, Name any) pointer: pass
func AddGlobalInAddressSpace(M any, Ty any, Name any, AddressSpace int) pointer: pass
func GetNamedGlobal(M any, Name any) pointer: pass
func GetFirstGlobal(M any) pointer: pass
func GetLastGlobal(M any) pointer: pass
func GetNextGlobal(GlobalVar any) pointer: pass
func GetPreviousGlobal(GlobalVar any) pointer: pass
func DeleteGlobal(GlobalVar any) none: pass
func GetInitializer(GlobalVar any) pointer: pass
func SetInitializer(GlobalVar any, ConstantVal any) none: pass
func IsThreadLocal(GlobalVar any) int: pass
func SetThreadLocal(GlobalVar any, IsThreadLocal int) none: pass
func IsGlobalConstant(GlobalVar any) int: pass
func SetGlobalConstant(GlobalVar any, IsConstant int) none: pass
func GetThreadLocalMode(GlobalVar any) int: pass
func SetThreadLocalMode(GlobalVar any, Mode int) none: pass
func IsExternallyInitialized(GlobalVar any) int: pass
func SetExternallyInitialized(GlobalVar any, IsExtInit int) none: pass
func AddAlias2(M any, ValueTy any, AddrSpace int, Aliasee any, Name any) pointer: pass
func GetNamedGlobalAlias(M any, Name any, NameLen int) pointer: pass
func GetFirstGlobalAlias(M any) pointer: pass
func GetLastGlobalAlias(M any) pointer: pass
func GetNextGlobalAlias(GA any) pointer: pass
func GetPreviousGlobalAlias(GA any) pointer: pass
func AliasGetAliasee(Alias any) pointer: pass
func AliasSetAliasee(Alias any, Aliasee any) none: pass
func DeleteFunction(Fn any) none: pass
func HasPersonalityFn(Fn any) int: pass
func GetPersonalityFn(Fn any) pointer: pass
func SetPersonalityFn(Fn any, PersonalityFn any) none: pass
func LookupIntrinsicID(Name any, NameLen int) int: pass
func GetIntrinsicID(Fn any) int: pass
func GetIntrinsicDeclaration(Mod any, ID int, ParamTypes any, ParamCount int) pointer: pass
func IntrinsicGetType(Ctx any, ID int, ParamTypes any, ParamCount int) pointer: pass
func IntrinsicGetName(ID int, NameLength any) pointer: pass
func IntrinsicCopyOverloadedName(ID int, ParamTypes any, ParamCount int, NameLength any) pointer: pass
func IntrinsicCopyOverloadedName2(Mod any, ID int, ParamTypes any, ParamCount int, NameLength any) pointer: pass
func IntrinsicIsOverloaded(ID int) int: pass
func GetFunctionCallConv(Fn any) int: pass
func SetFunctionCallConv(Fn any, CC int) none: pass
func GetGC(Fn any) pointer: pass
func SetGC(Fn any, Name any) none: pass
func AddAttributeAtIndex(F any, Idx int, A any) none: pass
func GetAttributeCountAtIndex(F any, Idx int) int: pass
func GetAttributesAtIndex(F any, Idx int, Attrs any) none: pass
func GetEnumAttributeAtIndex(F any, Idx int, KindID int) pointer: pass
func GetStringAttributeAtIndex(F any, Idx int, K any, KLen int) pointer: pass
func RemoveEnumAttributeAtIndex(F any, Idx int, KindID int) none: pass
func RemoveStringAttributeAtIndex(F any, Idx int, K any, KLen int) none: pass
func AddTargetDependentFunctionAttr(Fn any, A any, V any) none: pass
func CountParams(Fn any) int: pass
func GetParams(Fn any, Params any) none: pass
func GetParam(Fn any, Index int) pointer: pass
func GetParamParent(Inst any) pointer: pass
func GetFirstParam(Fn any) pointer: pass
func GetLastParam(Fn any) pointer: pass
func GetNextParam(Arg any) pointer: pass
func GetPreviousParam(Arg any) pointer: pass
func SetParamAlignment(Arg any, Align int) none: pass
func AddGlobalIFunc(M any, Name any, NameLen int, Ty any, AddrSpace int, Resolver any) pointer: pass
func GetNamedGlobalIFunc(M any, Name any, NameLen int) pointer: pass
func GetFirstGlobalIFunc(M any) pointer: pass
func GetLastGlobalIFunc(M any) pointer: pass
func GetNextGlobalIFunc(IFunc any) pointer: pass
func GetPreviousGlobalIFunc(IFunc any) pointer: pass
func GetGlobalIFuncResolver(IFunc any) pointer: pass
func SetGlobalIFuncResolver(IFunc any, Resolver any) none: pass
func EraseGlobalIFunc(IFunc any) none: pass
func RemoveGlobalIFunc(IFunc any) none: pass
func MDStringInContext2(C any, Str any, SLen int) pointer: pass
func MDNodeInContext2(C any, MDs any, Count int) pointer: pass
func MetadataAsValue(C any, MD any) pointer: pass
func ValueAsMetadata(Val any) pointer: pass
func GetMDString(V any, Length any) pointer: pass
func GetMDNodeNumOperands(V any) int: pass
func GetMDNodeOperands(V any, Dest any) none: pass
func ReplaceMDNodeOperandWith(V any, Index int, Replacement any) none: pass
func MDStringInContext(C any, Str any, SLen int) pointer: pass
func MDString(Str any, SLen int) pointer: pass
func MDNodeInContext(C any, Vals any, Count int) pointer: pass
func MDNode(Vals any, Count int) pointer: pass
func BasicBlockAsValue(BB any) pointer: pass
func ValueIsBasicBlock(Val any) int: pass
func ValueAsBasicBlock(Val any) pointer: pass
func GetBasicBlockName(BB any) pointer: pass
func GetBasicBlockParent(BB any) pointer: pass
func GetBasicBlockTerminator(BB any) pointer: pass
func CountBasicBlocks(Fn any) int: pass
func GetBasicBlocks(Fn any, BasicBlocks any) none: pass
func GetFirstBasicBlock(Fn any) pointer: pass
func GetLastBasicBlock(Fn any) pointer: pass
func GetNextBasicBlock(BB any) pointer: pass
func GetPreviousBasicBlock(BB any) pointer: pass
func GetEntryBasicBlock(Fn any) pointer: pass
func InsertExistingBasicBlockAfterInsertBlock(Builder any, BB any) none: pass
func AppendExistingBasicBlock(Fn any, BB any) none: pass
func CreateBasicBlockInContext(C any, Name any) pointer: pass
func AppendBasicBlockInContext(C any, Fn any, Name any) pointer: pass
func AppendBasicBlock(Fn any, Name any) pointer: pass
func InsertBasicBlockInContext(C any, BB any, Name any) pointer: pass
func InsertBasicBlock(InsertBeforeBB any, Name any) pointer: pass
func DeleteBasicBlock(BB any) none: pass
func RemoveBasicBlockFromParent(BB any) none: pass
func MoveBasicBlockBefore(BB any, MovePos any) none: pass
func MoveBasicBlockAfter(BB any, MovePos any) none: pass
func GetFirstInstruction(BB any) pointer: pass
func GetLastInstruction(BB any) pointer: pass
func HasMetadata(Val any) int: pass
func GetMetadata(Val any, KindID int) pointer: pass
func SetMetadata(Val any, KindID int, Node any) none: pass
func InstructionGetAllMetadataOtherThanDebugLoc(Instr any, NumEntries any) pointer: pass
func GetInstructionParent(Inst any) pointer: pass
func GetNextInstruction(Inst any) pointer: pass
func GetPreviousInstruction(Inst any) pointer: pass
func InstructionRemoveFromParent(Inst any) none: pass
func InstructionEraseFromParent(Inst any) none: pass
func DeleteInstruction(Inst any) none: pass
func GetInstructionOpcode(Inst any) int: pass
func GetICmpPredicate(Inst any) int: pass
func GetFCmpPredicate(Inst any) int: pass
func InstructionClone(Inst any) pointer: pass
func IsATerminatorInst(Inst any) pointer: pass
func GetNumArgOperands(Instr any) int: pass
func SetInstructionCallConv(Instr any, CC int) none: pass
func GetInstructionCallConv(Instr any) int: pass
func SetInstrParamAlignment(Instr any, Idx int, Align int) none: pass
func AddCallSiteAttribute(C any, Idx int, A any) none: pass
func GetCallSiteAttributeCount(C any, Idx int) int: pass
func GetCallSiteAttributes(C any, Idx int, Attrs any) none: pass
func GetCallSiteEnumAttribute(C any, Idx int, KindID int) pointer: pass
func GetCallSiteStringAttribute(C any, Idx int, K any, KLen int) pointer: pass
func RemoveCallSiteEnumAttribute(C any, Idx int, KindID int) none: pass
func RemoveCallSiteStringAttribute(C any, Idx int, K any, KLen int) none: pass
func GetCalledFunctionType(C any) pointer: pass
func GetCalledValue(Instr any) pointer: pass
func IsTailCall(CallInst any) int: pass
func SetTailCall(CallInst any, IsTailCall int) none: pass
func GetNormalDest(InvokeInst any) pointer: pass
func GetUnwindDest(InvokeInst any) pointer: pass
func SetNormalDest(InvokeInst any, B any) none: pass
func SetUnwindDest(InvokeInst any, B any) none: pass
func GetNumSuccessors(Term any) int: pass
func GetSuccessor(Term any, i int) pointer: pass
func SetSuccessor(Term any, i int, block any) none: pass
func IsConditional(Branch any) int: pass
func GetCondition(Branch any) pointer: pass
func SetCondition(Branch any, Cond any) none: pass
func GetSwitchDefaultDest(SwitchInstr any) pointer: pass
func GetAllocatedType(Alloca any) pointer: pass
func IsInBounds(GEP any) int: pass
func SetIsInBounds(GEP any, InBounds int) none: pass
func GetGEPSourceElementType(GEP any) pointer: pass
func AddIncoming(PhiNode any, IncomingValues any, IncomingBlocks any, Count int) none: pass
func CountIncoming(PhiNode any) int: pass
func GetIncomingValue(PhiNode any, Index int) pointer: pass
func GetIncomingBlock(PhiNode any, Index int) pointer: pass
func GetNumIndices(Inst any) int: pass
func GetIndices(Inst any) pointer: pass
func CreateBuilderInContext(C any) pointer: pass
func CreateBuilder() pointer: pass
func PositionBuilder(Builder any, Block any, Instr any) none: pass
func PositionBuilderBefore(Builder any, Instr any) none: pass
func PositionBuilderAtEnd(Builder any, Block any) none: pass
func GetInsertBlock(Builder any) pointer: pass
func ClearInsertionPosition(Builder any) none: pass
func InsertIntoBuilder(Builder any, Instr any) none: pass
func InsertIntoBuilderWithName(Builder any, Instr any, Name any) none: pass
func DisposeBuilder(Builder any) none: pass
func GetCurrentDebugLocation2(Builder any) pointer: pass
func SetCurrentDebugLocation2(Builder any, Loc any) none: pass
func SetInstDebugLocation(Builder any, Inst any) none: pass
func AddMetadataToInst(Builder any, Inst any) none: pass
func BuilderGetDefaultFPMathTag(Builder any) pointer: pass
func BuilderSetDefaultFPMathTag(Builder any, FPMathTag any) none: pass
func SetCurrentDebugLocation(Builder any, L any) none: pass
func GetCurrentDebugLocation(Builder any) pointer: pass
func BuildRetVoid(param0 any) pointer: pass
func BuildRet(param0 any, V any) pointer: pass
func BuildAggregateRet(param0 any, RetVals any, N int) pointer: pass
func BuildBr(param0 any, Dest any) pointer: pass
func BuildCondBr(param0 any, If any, Then any, Else any) pointer: pass
func BuildSwitch(param0 any, V any, Else any, NumCases int) pointer: pass
func BuildIndirectBr(B any, Addr any, NumDests int) pointer: pass
func BuildInvoke2(param0 any, Ty any, Fn any, Args any, NumArgs int, Then any, Catch any, Name any) pointer: pass
func BuildUnreachable(param0 any) pointer: pass
func BuildResume(B any, Exn any) pointer: pass
func BuildLandingPad(B any, Ty any, PersFn any, NumClauses int, Name any) pointer: pass
func BuildCleanupRet(B any, CatchPad any, BB any) pointer: pass
func BuildCatchRet(B any, CatchPad any, BB any) pointer: pass
func BuildCatchPad(B any, ParentPad any, Args any, NumArgs int, Name any) pointer: pass
func BuildCleanupPad(B any, ParentPad any, Args any, NumArgs int, Name any) pointer: pass
func BuildCatchSwitch(B any, ParentPad any, UnwindBB any, NumHandlers int, Name any) pointer: pass
func AddCase(Switch any, OnVal any, Dest any) none: pass
func AddDestination(IndirectBr any, Dest any) none: pass
func GetNumClauses(LandingPad any) int: pass
func GetClause(LandingPad any, Idx int) pointer: pass
func AddClause(LandingPad any, ClauseVal any) none: pass
func IsCleanup(LandingPad any) int: pass
func SetCleanup(LandingPad any, Val int) none: pass
func AddHandler(CatchSwitch any, Dest any) none: pass
func GetNumHandlers(CatchSwitch any) int: pass
func GetHandlers(CatchSwitch any, Handlers any) none: pass
func GetArgOperand(Funclet any, i int) pointer: pass
func SetArgOperand(Funclet any, i int, value any) none: pass
func GetParentCatchSwitch(CatchPad any) pointer: pass
func SetParentCatchSwitch(CatchPad any, CatchSwitch any) none: pass
func BuildAdd(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildNSWAdd(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildNUWAdd(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildFAdd(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildSub(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildNSWSub(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildNUWSub(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildFSub(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildMul(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildNSWMul(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildNUWMul(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildFMul(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildUDiv(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildExactUDiv(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildSDiv(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildExactSDiv(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildFDiv(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildURem(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildSRem(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildFRem(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildShl(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildLShr(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildAShr(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildAnd(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildOr(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildXor(param0 any, LHS any, RHS any, Name any) pointer: pass
func BuildBinOp(B any, Op int, LHS any, RHS any, Name any) pointer: pass
func BuildNeg(param0 any, V any, Name any) pointer: pass
func BuildNSWNeg(B any, V any, Name any) pointer: pass
func BuildNUWNeg(B any, V any, Name any) pointer: pass
func BuildFNeg(param0 any, V any, Name any) pointer: pass
func BuildNot(param0 any, V any, Name any) pointer: pass
func GetNUW(ArithInst any) int: pass
func SetNUW(ArithInst any, HasNUW int) none: pass
func GetNSW(ArithInst any) int: pass
func SetNSW(ArithInst any, HasNSW int) none: pass
func GetExact(DivOrShrInst any) int: pass
func SetExact(DivOrShrInst any, IsExact int) none: pass
func BuildMalloc(param0 any, Ty any, Name any) pointer: pass
func BuildArrayMalloc(param0 any, Ty any, Val any, Name any) pointer: pass
func BuildMemSet(B any, Ptr any, Val any, Len any, Align int) pointer: pass
func BuildMemCpy(B any, Dst any, DstAlign int, Src any, SrcAlign int, Size any) pointer: pass
func BuildMemMove(B any, Dst any, DstAlign int, Src any, SrcAlign int, Size any) pointer: pass
func BuildAlloca(param0 any, Ty any, Name any) pointer: pass
func BuildArrayAlloca(param0 any, Ty any, Val any, Name any) pointer: pass
func BuildFree(param0 any, PointerVal any) pointer: pass
func BuildLoad2(param0 any, Ty any, PointerVal any, Name any) pointer: pass
func BuildStore(param0 any, Val any, Ptr any) pointer: pass
func BuildGEP2(B any, Ty any, Pointer any, Indices any, NumIndices int, Name any) pointer: pass
func BuildInBoundsGEP2(B any, Ty any, Pointer any, Indices any, NumIndices int, Name any) pointer: pass
func BuildStructGEP2(B any, Ty any, Pointer any, Idx int, Name any) pointer: pass
func BuildGlobalString(B any, Str any, Name any) pointer: pass
func BuildGlobalStringPtr(B any, Str any, Name any) pointer: pass
func GetVolatile(MemoryAccessInst any) int: pass
func SetVolatile(MemoryAccessInst any, IsVolatile int) none: pass
func GetWeak(CmpXchgInst any) int: pass
func SetWeak(CmpXchgInst any, IsWeak int) none: pass
func GetOrdering(MemoryAccessInst any) int: pass
func SetOrdering(MemoryAccessInst any, Ordering int) none: pass
func GetAtomicRMWBinOp(AtomicRMWInst any) int: pass
func SetAtomicRMWBinOp(AtomicRMWInst any, BinOp int) none: pass
func BuildTrunc(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildZExt(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildSExt(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildFPToUI(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildFPToSI(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildUIToFP(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildSIToFP(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildFPTrunc(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildFPExt(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildPtrToInt(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildIntToPtr(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildBitCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildAddrSpaceCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildZExtOrBitCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildSExtOrBitCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildTruncOrBitCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildCast(B any, Op int, Val any, DestTy any, Name any) pointer: pass
func BuildPointerCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildIntCast2(param0 any, Val any, DestTy any, IsSigned int, Name any) pointer: pass
func BuildFPCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func BuildIntCast(param0 any, Val any, DestTy any, Name any) pointer: pass
func GetCastOpcode(Src any, SrcIsSigned int, DestTy any, DestIsSigned int) int: pass
func BuildICmp(param0 any, Op int, LHS any, RHS any, Name any) pointer: pass
func BuildFCmp(param0 any, Op int, LHS any, RHS any, Name any) pointer: pass
func BuildPhi(param0 any, Ty any, Name any) pointer: pass
func BuildCall2(param0 any, param1 any, Fn any, Args any, NumArgs int, Name any) pointer: pass
func BuildSelect(param0 any, If any, Then any, Else any, Name any) pointer: pass
func BuildVAArg(param0 any, List any, Ty any, Name any) pointer: pass
func BuildExtractElement(param0 any, VecVal any, Index any, Name any) pointer: pass
func BuildInsertElement(param0 any, VecVal any, EltVal any, Index any, Name any) pointer: pass
func BuildShuffleVector(param0 any, V1 any, V2 any, Mask any, Name any) pointer: pass
func BuildExtractValue(param0 any, AggVal any, Index int, Name any) pointer: pass
func BuildInsertValue(param0 any, AggVal any, EltVal any, Index int, Name any) pointer: pass
func BuildFreeze(param0 any, Val any, Name any) pointer: pass
func BuildIsNull(param0 any, Val any, Name any) pointer: pass
func BuildIsNotNull(param0 any, Val any, Name any) pointer: pass
func BuildPtrDiff2(param0 any, ElemTy any, LHS any, RHS any, Name any) pointer: pass
func BuildFence(B any, ordering int, singleThread int, Name any) pointer: pass
func BuildAtomicRMW(B any, op int, PTR any, Val any, ordering int, singleThread int) pointer: pass
func BuildAtomicCmpXchg(B any, Ptr any, Cmp any, New any, SuccessOrdering int, FailureOrdering int, SingleThread int) pointer: pass
func GetNumMaskElements(ShuffleVectorInst any) int: pass
func GetUndefMaskElem() int: pass
func GetMaskValue(ShuffleVectorInst any, Elt int) int: pass
func IsAtomicSingleThread(AtomicInst any) int: pass
func SetAtomicSingleThread(AtomicInst any, SingleThread int) none: pass
func GetCmpXchgSuccessOrdering(CmpXchgInst any) int: pass
func SetCmpXchgSuccessOrdering(CmpXchgInst any, Ordering int) none: pass
func GetCmpXchgFailureOrdering(CmpXchgInst any) int: pass
func SetCmpXchgFailureOrdering(CmpXchgInst any, Ordering int) none: pass
func CreateModuleProviderForExistingModule(M any) pointer: pass
func DisposeModuleProvider(M any) none: pass
func CreateMemoryBufferWithContentsOfFile(Path any, OutMemBuf any, OutMessage any) int: pass
func CreateMemoryBufferWithSTDIN(OutMemBuf any, OutMessage any) int: pass
func CreateMemoryBufferWithMemoryRange(InputData any, InputDataLength int, BufferName any, RequiresNullTerminator int) pointer: pass
func CreateMemoryBufferWithMemoryRangeCopy(InputData any, InputDataLength int, BufferName any) pointer: pass
func GetBufferStart(MemBuf any) pointer: pass
func GetBufferSize(MemBuf any) int: pass
func DisposeMemoryBuffer(MemBuf any) none: pass
func CreatePassManager() pointer: pass
func CreateFunctionPassManagerForModule(M any) pointer: pass
func CreateFunctionPassManager(MP any) pointer: pass
func RunPassManager(PM any, M any) int: pass
func InitializeFunctionPassManager(FPM any) int: pass
func RunFunctionPassManager(FPM any, F any) int: pass
func FinalizeFunctionPassManager(FPM any) int: pass
func DisposePassManager(PM any) none: pass
func StartMultithreaded() int: pass
func StopMultithreaded() none: pass
func IsMultithreaded() int: pass
type SectionIteratorRef pointer

type SymbolIteratorRef pointer

type RelocationIteratorRef pointer

var Root.BinaryTypeArchive int = 0
var Root.BinaryTypeMachOUniversalBinary int = 1
var Root.BinaryTypeCOFFImportFile int = 2
var Root.BinaryTypeIR int = 3
var Root.BinaryTypeWinRes int = 4
var Root.BinaryTypeCOFF int = 5
var Root.BinaryTypeELF32L int = 6
var Root.BinaryTypeELF32B int = 7
var Root.BinaryTypeELF64L int = 8
var Root.BinaryTypeELF64B int = 9
var Root.BinaryTypeMachO32L int = 10
var Root.BinaryTypeMachO32B int = 11
var Root.BinaryTypeMachO64L int = 12
var Root.BinaryTypeMachO64B int = 13
var Root.BinaryTypeWasm int = 14
var Root.BinaryTypeOffload int = 15

func CreateBinary(MemBuf any, Context any, ErrorMessage any) pointer: pass
func DisposeBinary(BR any) none: pass
func BinaryCopyMemoryBuffer(BR any) pointer: pass
func BinaryGetType(BR any) int: pass
func MachOUniversalBinaryCopyObjectForArch(BR any, Arch any, ArchLen int, ErrorMessage any) pointer: pass
func ObjectFileCopySectionIterator(BR any) pointer: pass
func ObjectFileIsSectionIteratorAtEnd(BR any, SI any) int: pass
func ObjectFileCopySymbolIterator(BR any) pointer: pass
func ObjectFileIsSymbolIteratorAtEnd(BR any, SI any) int: pass
func DisposeSectionIterator(SI any) none: pass
func MoveToNextSection(SI any) none: pass
func MoveToContainingSection(Sect any, Sym any) none: pass
func DisposeSymbolIterator(SI any) none: pass
func MoveToNextSymbol(SI any) none: pass
func GetSectionName(SI any) pointer: pass
func GetSectionSize(SI any) int: pass
func GetSectionContents(SI any) pointer: pass
func GetSectionAddress(SI any) int: pass
func GetSectionContainsSymbol(SI any, Sym any) int: pass
func GetRelocations(Section any) pointer: pass
func DisposeRelocationIterator(RI any) none: pass
func IsRelocationIteratorAtEnd(Section any, RI any) int: pass
func MoveToNextRelocation(RI any) none: pass
func GetSymbolName(SI any) pointer: pass
func GetSymbolAddress(SI any) int: pass
func GetSymbolSize(SI any) int: pass
func GetRelocationOffset(RI any) int: pass
func GetRelocationSymbol(RI any) pointer: pass
func GetRelocationType(RI any) int: pass
func GetRelocationTypeName(RI any) pointer: pass
func GetRelocationValueString(RI any) pointer: pass
type ObjectFileRef pointer

func CreateObjectFile(MemBuf any) pointer: pass
func DisposeObjectFile(ObjectFile any) none: pass
func GetSections(ObjectFile any) pointer: pass
func IsSectionIteratorAtEnd(ObjectFile any, SI any) int: pass
func GetSymbols(ObjectFile any) pointer: pass
func IsSymbolIteratorAtEnd(ObjectFile any, SI any) int: pass

import os
my Root.ffi = none
my Root.lib = load()
func load():
    ffi = os.newFFI()
    ffi.cfunc('LLVMInstallFatalErrorHandler', [.voidPtr], .void)
    ffi.cfunc('LLVMResetFatalErrorHandler', [], .void)
    ffi.cfunc('LLVMEnablePrettyStackTrace', [], .void)
    ffi.cfunc('LLVMShutdown', [], .void)
    ffi.cfunc('LLVMGetVersion', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMCreateMessage', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeMessage', [.voidPtr], .void)
    ffi.cfunc('LLVMContextCreate', [], .voidPtr)
    ffi.cfunc('LLVMGetGlobalContext', [], .voidPtr)
    ffi.cfunc('LLVMContextSetDiagnosticHandler', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMContextGetDiagnosticHandler', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMContextGetDiagnosticContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMContextSetYieldCallback', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMContextShouldDiscardValueNames', [.voidPtr], .int)
    ffi.cfunc('LLVMContextSetDiscardValueNames', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMContextDispose', [.voidPtr], .void)
    ffi.cfunc('LLVMGetDiagInfoDescription', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetDiagInfoSeverity', [.voidPtr], .int)
    ffi.cfunc('LLVMGetMDKindIDInContext', [.voidPtr, .voidPtr, .uint], .uint)
    ffi.cfunc('LLVMGetMDKindID', [.voidPtr, .uint], .uint)
    ffi.cfunc('LLVMGetEnumAttributeKindForName', [.voidPtr, .long], .uint)
    ffi.cfunc('LLVMGetLastEnumAttributeKind', [], .uint)
    ffi.cfunc('LLVMCreateEnumAttribute', [.voidPtr, .uint, .ulong], .voidPtr)
    ffi.cfunc('LLVMGetEnumAttributeKind', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetEnumAttributeValue', [.voidPtr], .ulong)
    ffi.cfunc('LLVMCreateTypeAttribute', [.voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetTypeAttributeValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCreateStringAttribute', [.voidPtr, .voidPtr, .uint, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetStringAttributeKind', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetStringAttributeValue', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsEnumAttribute', [.voidPtr], .int)
    ffi.cfunc('LLVMIsStringAttribute', [.voidPtr], .int)
    ffi.cfunc('LLVMIsTypeAttribute', [.voidPtr], .int)
    ffi.cfunc('LLVMGetTypeByName2', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMModuleCreateWithName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMModuleCreateWithNameInContext', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMCloneModule', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeModule', [.voidPtr], .void)
    ffi.cfunc('LLVMGetModuleIdentifier', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetModuleIdentifier', [.voidPtr, .voidPtr, .long], .void)
    ffi.cfunc('LLVMGetSourceFileName', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetSourceFileName', [.voidPtr, .voidPtr, .long], .void)
    ffi.cfunc('LLVMGetDataLayoutStr', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetDataLayout', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetDataLayout', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetTarget', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetTarget', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMCopyModuleFlagsMetadata', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeModuleFlagsMetadata', [.voidPtr], .void)
    ffi.cfunc('LLVMModuleFlagEntriesGetFlagBehavior', [.voidPtr, .uint], .int)
    ffi.cfunc('LLVMModuleFlagEntriesGetKey', [.voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMModuleFlagEntriesGetMetadata', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetModuleFlag', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMAddModuleFlag', [.voidPtr, .int, .voidPtr, .long, .voidPtr], .void)
    ffi.cfunc('LLVMDumpModule', [.voidPtr], .void)
    ffi.cfunc('LLVMPrintModuleToFile', [.voidPtr, .voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMPrintModuleToString', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetModuleInlineAsm', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetModuleInlineAsm2', [.voidPtr, .voidPtr, .long], .void)
    ffi.cfunc('LLVMAppendModuleInlineAsm', [.voidPtr, .voidPtr, .long], .void)
    ffi.cfunc('LLVMGetInlineAsm', [.voidPtr, .voidPtr, .long, .voidPtr, .long, .int, .int, .int, .int], .voidPtr)
    ffi.cfunc('LLVMGetModuleContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetTypeByName', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetFirstNamedMetadata', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastNamedMetadata', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextNamedMetadata', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousNamedMetadata', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNamedMetadata', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMGetOrInsertNamedMetadata', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMGetNamedMetadataName', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNamedMetadataNumOperands', [.voidPtr, .voidPtr], .uint)
    ffi.cfunc('LLVMGetNamedMetadataOperands', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMAddNamedMetadataOperand', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetDebugLocDirectory', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetDebugLocFilename', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetDebugLocLine', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetDebugLocColumn', [.voidPtr], .uint)
    ffi.cfunc('LLVMAddFunction', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNamedFunction', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetFirstFunction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastFunction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextFunction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousFunction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetModuleInlineAsm', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetTypeKind', [.voidPtr], .int)
    ffi.cfunc('LLVMTypeIsSized', [.voidPtr], .int)
    ffi.cfunc('LLVMGetTypeContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDumpType', [.voidPtr], .void)
    ffi.cfunc('LLVMPrintTypeToString', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInt1TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInt8TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInt16TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInt32TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInt64TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInt128TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIntTypeInContext', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMInt1Type', [], .voidPtr)
    ffi.cfunc('LLVMInt8Type', [], .voidPtr)
    ffi.cfunc('LLVMInt16Type', [], .voidPtr)
    ffi.cfunc('LLVMInt32Type', [], .voidPtr)
    ffi.cfunc('LLVMInt64Type', [], .voidPtr)
    ffi.cfunc('LLVMInt128Type', [], .voidPtr)
    ffi.cfunc('LLVMIntType', [.uint], .voidPtr)
    ffi.cfunc('LLVMGetIntTypeWidth', [.voidPtr], .uint)
    ffi.cfunc('LLVMHalfTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMBFloatTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMFloatTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDoubleTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMX86FP80TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMFP128TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMPPCFP128TypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMHalfType', [], .voidPtr)
    ffi.cfunc('LLVMBFloatType', [], .voidPtr)
    ffi.cfunc('LLVMFloatType', [], .voidPtr)
    ffi.cfunc('LLVMDoubleType', [], .voidPtr)
    ffi.cfunc('LLVMX86FP80Type', [], .voidPtr)
    ffi.cfunc('LLVMFP128Type', [], .voidPtr)
    ffi.cfunc('LLVMPPCFP128Type', [], .voidPtr)
    ffi.cfunc('LLVMFunctionType', [.voidPtr, .voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMIsFunctionVarArg', [.voidPtr], .int)
    ffi.cfunc('LLVMGetReturnType', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCountParamTypes', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetParamTypes', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMStructTypeInContext', [.voidPtr, .voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMStructType', [.voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMStructCreateNamed', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetStructName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMStructSetBody', [.voidPtr, .voidPtr, .uint, .int], .void)
    ffi.cfunc('LLVMCountStructElementTypes', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetStructElementTypes', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMStructGetTypeAtIndex', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMIsPackedStruct', [.voidPtr], .int)
    ffi.cfunc('LLVMIsOpaqueStruct', [.voidPtr], .int)
    ffi.cfunc('LLVMIsLiteralStruct', [.voidPtr], .int)
    ffi.cfunc('LLVMGetElementType', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetSubtypes', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetNumContainedTypes', [.voidPtr], .uint)
    ffi.cfunc('LLVMArrayType', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMArrayType2', [.voidPtr, .ulong], .voidPtr)
    ffi.cfunc('LLVMGetArrayLength', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetArrayLength2', [.voidPtr], .ulong)
    ffi.cfunc('LLVMPointerType', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMPointerTypeIsOpaque', [.voidPtr], .int)
    ffi.cfunc('LLVMPointerTypeInContext', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetPointerAddressSpace', [.voidPtr], .uint)
    ffi.cfunc('LLVMVectorType', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMScalableVectorType', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetVectorSize', [.voidPtr], .uint)
    ffi.cfunc('LLVMVoidTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMLabelTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMX86MMXTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMX86AMXTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMTokenTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMMetadataTypeInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMVoidType', [], .voidPtr)
    ffi.cfunc('LLVMLabelType', [], .voidPtr)
    ffi.cfunc('LLVMX86MMXType', [], .voidPtr)
    ffi.cfunc('LLVMX86AMXType', [], .voidPtr)
    ffi.cfunc('LLVMTargetExtTypeInContext', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMTypeOf', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetValueKind', [.voidPtr], .int)
    ffi.cfunc('LLVMGetValueName2', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetValueName2', [.voidPtr, .voidPtr, .long], .void)
    ffi.cfunc('LLVMDumpValue', [.voidPtr], .void)
    ffi.cfunc('LLVMPrintValueToString', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMReplaceAllUsesWith', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMIsConstant', [.voidPtr], .int)
    ffi.cfunc('LLVMIsUndef', [.voidPtr], .int)
    ffi.cfunc('LLVMIsPoison', [.voidPtr], .int)
    ffi.cfunc('LLVMIsAArgument', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsABasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAInlineAsm', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAUser', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstant', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsABlockAddress', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantAggregateZero', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantArray', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantDataSequential', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantDataArray', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantDataVector', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantExpr', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantFP', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantInt', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantPointerNull', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantStruct', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantTokenNone', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAConstantVector', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAGlobalValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAGlobalAlias', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAGlobalObject', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFunction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAGlobalVariable', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAGlobalIFunc', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAUndefValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAPoisonValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAInstruction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAUnaryOperator', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsABinaryOperator', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACallInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAIntrinsicInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsADbgInfoIntrinsic', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsADbgVariableIntrinsic', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsADbgDeclareInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsADbgLabelInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAMemIntrinsic', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAMemCpyInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAMemMoveInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAMemSetInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACmpInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFCmpInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAICmpInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAExtractElementInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAGetElementPtrInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAInsertElementInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAInsertValueInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsALandingPadInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAPHINode', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsASelectInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAShuffleVectorInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAStoreInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsABranchInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAIndirectBrInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAInvokeInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAReturnInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsASwitchInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAUnreachableInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAResumeInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACleanupReturnInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACatchReturnInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACatchSwitchInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACallBrInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFuncletPadInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACatchPadInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACleanupPadInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAUnaryInstruction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAAllocaInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsACastInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAAddrSpaceCastInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsABitCastInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFPExtInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFPToSIInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFPToUIInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFPTruncInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAIntToPtrInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAPtrToIntInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsASExtInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsASIToFPInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsATruncInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAUIToFPInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAZExtInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAExtractValueInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsALoadInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAVAArgInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFreezeInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAAtomicCmpXchgInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAAtomicRMWInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAFenceInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAMDNode', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAValueAsMetadata', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsAMDString', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetValueName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetValueName', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetFirstUse', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextUse', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetUser', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetUsedValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetOperand', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetOperandUse', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMSetOperand', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGetNumOperands', [.voidPtr], .int)
    ffi.cfunc('LLVMConstNull', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstAllOnes', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetUndef', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPoison', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsNull', [.voidPtr], .int)
    ffi.cfunc('LLVMConstPointerNull', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstInt', [.voidPtr, .ulong, .int], .voidPtr)
    ffi.cfunc('LLVMConstIntOfArbitraryPrecision', [.voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstIntOfString', [.voidPtr, .voidPtr, .uchar], .voidPtr)
    ffi.cfunc('LLVMConstIntOfStringAndSize', [.voidPtr, .voidPtr, .uint, .uchar], .voidPtr)
    ffi.cfunc('LLVMConstReal', [.voidPtr, .double], .voidPtr)
    ffi.cfunc('LLVMConstRealOfString', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstRealOfStringAndSize', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMConstIntGetZExtValue', [.voidPtr], .ulong)
    ffi.cfunc('LLVMConstIntGetSExtValue', [.voidPtr], .long)
    ffi.cfunc('LLVMConstRealGetDouble', [.voidPtr, .voidPtr], .double)
    ffi.cfunc('LLVMConstStringInContext', [.voidPtr, .voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMConstString', [.voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMIsConstantString', [.voidPtr], .int)
    ffi.cfunc('LLVMGetAsString', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstStructInContext', [.voidPtr, .voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMConstStruct', [.voidPtr, .uint, .int], .voidPtr)
    ffi.cfunc('LLVMConstArray', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMConstArray2', [.voidPtr, .voidPtr, .ulong], .voidPtr)
    ffi.cfunc('LLVMConstNamedStruct', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetAggregateElement', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetElementAsConstant', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMConstVector', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetConstOpcode', [.voidPtr], .int)
    ffi.cfunc('LLVMAlignOf', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSizeOf', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNeg', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNSWNeg', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNUWNeg', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNot', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstAdd', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNSWAdd', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNUWAdd', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstSub', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNSWSub', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNUWSub', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstMul', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNSWMul', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstNUWMul', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstAnd', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstOr', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstXor', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstICmp', [.int, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstFCmp', [.int, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstShl', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstLShr', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstAShr', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstGEP2', [.voidPtr, .voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMConstInBoundsGEP2', [.voidPtr, .voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMConstTrunc', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstSExt', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstZExt', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstFPTrunc', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstFPExt', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstUIToFP', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstSIToFP', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstFPToUI', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstFPToSI', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstPtrToInt', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstIntToPtr', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstBitCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstAddrSpaceCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstZExtOrBitCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstSExtOrBitCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstTruncOrBitCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstPointerCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstIntCast', [.voidPtr, .voidPtr, .int], .voidPtr)
    ffi.cfunc('LLVMConstFPCast', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstExtractElement', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstInsertElement', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstShuffleVector', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBlockAddress', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMConstInlineAsm', [.voidPtr, .voidPtr, .voidPtr, .int, .int], .voidPtr)
    ffi.cfunc('LLVMGetGlobalParent', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsDeclaration', [.voidPtr], .int)
    ffi.cfunc('LLVMGetLinkage', [.voidPtr], .int)
    ffi.cfunc('LLVMSetLinkage', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetSection', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetSection', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetVisibility', [.voidPtr], .int)
    ffi.cfunc('LLVMSetVisibility', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetDLLStorageClass', [.voidPtr], .int)
    ffi.cfunc('LLVMSetDLLStorageClass', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetUnnamedAddress', [.voidPtr], .int)
    ffi.cfunc('LLVMSetUnnamedAddress', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGlobalGetValueType', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMHasUnnamedAddr', [.voidPtr], .int)
    ffi.cfunc('LLVMSetUnnamedAddr', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetAlignment', [.voidPtr], .uint)
    ffi.cfunc('LLVMSetAlignment', [.voidPtr, .uint], .void)
    ffi.cfunc('LLVMGlobalSetMetadata', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGlobalEraseMetadata', [.voidPtr, .uint], .void)
    ffi.cfunc('LLVMGlobalClearMetadata', [.voidPtr], .void)
    ffi.cfunc('LLVMGlobalCopyAllMetadata', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeValueMetadataEntries', [.voidPtr], .void)
    ffi.cfunc('LLVMValueMetadataEntriesGetKind', [.voidPtr, .uint], .uint)
    ffi.cfunc('LLVMValueMetadataEntriesGetMetadata', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMAddGlobal', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMAddGlobalInAddressSpace', [.voidPtr, .voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetNamedGlobal', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetFirstGlobal', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastGlobal', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextGlobal', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousGlobal', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDeleteGlobal', [.voidPtr], .void)
    ffi.cfunc('LLVMGetInitializer', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetInitializer', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMIsThreadLocal', [.voidPtr], .int)
    ffi.cfunc('LLVMSetThreadLocal', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMIsGlobalConstant', [.voidPtr], .int)
    ffi.cfunc('LLVMSetGlobalConstant', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetThreadLocalMode', [.voidPtr], .int)
    ffi.cfunc('LLVMSetThreadLocalMode', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMIsExternallyInitialized', [.voidPtr], .int)
    ffi.cfunc('LLVMSetExternallyInitialized', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMAddAlias2', [.voidPtr, .voidPtr, .uint, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNamedGlobalAlias', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMGetFirstGlobalAlias', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastGlobalAlias', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextGlobalAlias', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousGlobalAlias', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMAliasGetAliasee', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMAliasSetAliasee', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMDeleteFunction', [.voidPtr], .void)
    ffi.cfunc('LLVMHasPersonalityFn', [.voidPtr], .int)
    ffi.cfunc('LLVMGetPersonalityFn', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetPersonalityFn', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMLookupIntrinsicID', [.voidPtr, .long], .uint)
    ffi.cfunc('LLVMGetIntrinsicID', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetIntrinsicDeclaration', [.voidPtr, .uint, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMIntrinsicGetType', [.voidPtr, .uint, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMIntrinsicGetName', [.uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMIntrinsicCopyOverloadedName', [.uint, .voidPtr, .long, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMIntrinsicCopyOverloadedName2', [.voidPtr, .uint, .voidPtr, .long, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMIntrinsicIsOverloaded', [.uint], .int)
    ffi.cfunc('LLVMGetFunctionCallConv', [.voidPtr], .uint)
    ffi.cfunc('LLVMSetFunctionCallConv', [.voidPtr, .uint], .void)
    ffi.cfunc('LLVMGetGC', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetGC', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMAddAttributeAtIndex', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGetAttributeCountAtIndex', [.voidPtr, .uint], .uint)
    ffi.cfunc('LLVMGetAttributesAtIndex', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGetEnumAttributeAtIndex', [.voidPtr, .uint, .uint], .voidPtr)
    ffi.cfunc('LLVMGetStringAttributeAtIndex', [.voidPtr, .uint, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMRemoveEnumAttributeAtIndex', [.voidPtr, .uint, .uint], .void)
    ffi.cfunc('LLVMRemoveStringAttributeAtIndex', [.voidPtr, .uint, .voidPtr, .uint], .void)
    ffi.cfunc('LLVMAddTargetDependentFunctionAttr', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMCountParams', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetParams', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetParam', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetParamParent', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetFirstParam', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastParam', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextParam', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousParam', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetParamAlignment', [.voidPtr, .uint], .void)
    ffi.cfunc('LLVMAddGlobalIFunc', [.voidPtr, .voidPtr, .long, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNamedGlobalIFunc', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMGetFirstGlobalIFunc', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastGlobalIFunc', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextGlobalIFunc', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousGlobalIFunc', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetGlobalIFuncResolver', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetGlobalIFuncResolver', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMEraseGlobalIFunc', [.voidPtr], .void)
    ffi.cfunc('LLVMRemoveGlobalIFunc', [.voidPtr], .void)
    ffi.cfunc('LLVMMDStringInContext2', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMMDNodeInContext2', [.voidPtr, .voidPtr, .long], .voidPtr)
    ffi.cfunc('LLVMMetadataAsValue', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMValueAsMetadata', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetMDString', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetMDNodeNumOperands', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetMDNodeOperands', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMReplaceMDNodeOperandWith', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMMDStringInContext', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMMDString', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMMDNodeInContext', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMMDNode', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMBasicBlockAsValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMValueIsBasicBlock', [.voidPtr], .int)
    ffi.cfunc('LLVMValueAsBasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetBasicBlockName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetBasicBlockParent', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetBasicBlockTerminator', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCountBasicBlocks', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetBasicBlocks', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetFirstBasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastBasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextBasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousBasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetEntryBasicBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInsertExistingBasicBlockAfterInsertBlock', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMAppendExistingBasicBlock', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMCreateBasicBlockInContext', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMAppendBasicBlockInContext', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMAppendBasicBlock', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMInsertBasicBlockInContext', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMInsertBasicBlock', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMDeleteBasicBlock', [.voidPtr], .void)
    ffi.cfunc('LLVMRemoveBasicBlockFromParent', [.voidPtr], .void)
    ffi.cfunc('LLVMMoveBasicBlockBefore', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMMoveBasicBlockAfter', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetFirstInstruction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetLastInstruction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMHasMetadata', [.voidPtr], .int)
    ffi.cfunc('LLVMGetMetadata', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMSetMetadata', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMInstructionGetAllMetadataOtherThanDebugLoc', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetInstructionParent', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNextInstruction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetPreviousInstruction', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMInstructionRemoveFromParent', [.voidPtr], .void)
    ffi.cfunc('LLVMInstructionEraseFromParent', [.voidPtr], .void)
    ffi.cfunc('LLVMDeleteInstruction', [.voidPtr], .void)
    ffi.cfunc('LLVMGetInstructionOpcode', [.voidPtr], .int)
    ffi.cfunc('LLVMGetICmpPredicate', [.voidPtr], .int)
    ffi.cfunc('LLVMGetFCmpPredicate', [.voidPtr], .int)
    ffi.cfunc('LLVMInstructionClone', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsATerminatorInst', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNumArgOperands', [.voidPtr], .uint)
    ffi.cfunc('LLVMSetInstructionCallConv', [.voidPtr, .uint], .void)
    ffi.cfunc('LLVMGetInstructionCallConv', [.voidPtr], .uint)
    ffi.cfunc('LLVMSetInstrParamAlignment', [.voidPtr, .uint, .uint], .void)
    ffi.cfunc('LLVMAddCallSiteAttribute', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGetCallSiteAttributeCount', [.voidPtr, .uint], .uint)
    ffi.cfunc('LLVMGetCallSiteAttributes', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGetCallSiteEnumAttribute', [.voidPtr, .uint, .uint], .voidPtr)
    ffi.cfunc('LLVMGetCallSiteStringAttribute', [.voidPtr, .uint, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMRemoveCallSiteEnumAttribute', [.voidPtr, .uint, .uint], .void)
    ffi.cfunc('LLVMRemoveCallSiteStringAttribute', [.voidPtr, .uint, .voidPtr, .uint], .void)
    ffi.cfunc('LLVMGetCalledFunctionType', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetCalledValue', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsTailCall', [.voidPtr], .int)
    ffi.cfunc('LLVMSetTailCall', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetNormalDest', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetUnwindDest', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetNormalDest', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMSetUnwindDest', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetNumSuccessors', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetSuccessor', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMSetSuccessor', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMIsConditional', [.voidPtr], .int)
    ffi.cfunc('LLVMGetCondition', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetCondition', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetSwitchDefaultDest', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetAllocatedType', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsInBounds', [.voidPtr], .int)
    ffi.cfunc('LLVMSetIsInBounds', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetGEPSourceElementType', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMAddIncoming', [.voidPtr, .voidPtr, .voidPtr, .uint], .void)
    ffi.cfunc('LLVMCountIncoming', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetIncomingValue', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetIncomingBlock', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMGetNumIndices', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetIndices', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCreateBuilderInContext', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCreateBuilder', [], .voidPtr)
    ffi.cfunc('LLVMPositionBuilder', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMPositionBuilderBefore', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMPositionBuilderAtEnd', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetInsertBlock', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMClearInsertionPosition', [.voidPtr], .void)
    ffi.cfunc('LLVMInsertIntoBuilder', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMInsertIntoBuilderWithName', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMDisposeBuilder', [.voidPtr], .void)
    ffi.cfunc('LLVMGetCurrentDebugLocation2', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetCurrentDebugLocation2', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMSetInstDebugLocation', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMAddMetadataToInst', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMBuilderGetDefaultFPMathTag', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuilderSetDefaultFPMathTag', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMSetCurrentDebugLocation', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetCurrentDebugLocation', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildRetVoid', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildRet', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildAggregateRet', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMBuildBr', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCondBr', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSwitch', [.voidPtr, .voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMBuildIndirectBr', [.voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMBuildInvoke2', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildUnreachable', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildResume', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildLandingPad', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCleanupRet', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCatchRet', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCatchPad', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCleanupPad', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCatchSwitch', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMAddCase', [.voidPtr, .voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMAddDestination', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetNumClauses', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetClause', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMAddClause', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMIsCleanup', [.voidPtr], .int)
    ffi.cfunc('LLVMSetCleanup', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMAddHandler', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetNumHandlers', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetHandlers', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMGetArgOperand', [.voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMSetArgOperand', [.voidPtr, .uint, .voidPtr], .void)
    ffi.cfunc('LLVMGetParentCatchSwitch', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMSetParentCatchSwitch', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMBuildAdd', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNSWAdd', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNUWAdd', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFAdd', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSub', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNSWSub', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNUWSub', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFSub', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildMul', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNSWMul', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNUWMul', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFMul', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildUDiv', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildExactUDiv', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSDiv', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildExactSDiv', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFDiv', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildURem', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSRem', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFRem', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildShl', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildLShr', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildAShr', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildAnd', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildOr', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildXor', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildBinOp', [.voidPtr, .int, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNeg', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNSWNeg', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNUWNeg', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFNeg', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildNot', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetNUW', [.voidPtr], .int)
    ffi.cfunc('LLVMSetNUW', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetNSW', [.voidPtr], .int)
    ffi.cfunc('LLVMSetNSW', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetExact', [.voidPtr], .int)
    ffi.cfunc('LLVMSetExact', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMBuildMalloc', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildArrayMalloc', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildMemSet', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .uint], .voidPtr)
    ffi.cfunc('LLVMBuildMemCpy', [.voidPtr, .voidPtr, .uint, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildMemMove', [.voidPtr, .voidPtr, .uint, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildAlloca', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildArrayAlloca', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFree', [.voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildLoad2', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildStore', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildGEP2', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildInBoundsGEP2', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildStructGEP2', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildGlobalString', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildGlobalStringPtr', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetVolatile', [.voidPtr], .int)
    ffi.cfunc('LLVMSetVolatile', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetWeak', [.voidPtr], .int)
    ffi.cfunc('LLVMSetWeak', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetOrdering', [.voidPtr], .int)
    ffi.cfunc('LLVMSetOrdering', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetAtomicRMWBinOp', [.voidPtr], .int)
    ffi.cfunc('LLVMSetAtomicRMWBinOp', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMBuildTrunc', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildZExt', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSExt', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFPToUI', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFPToSI', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildUIToFP', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSIToFP', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFPTrunc', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFPExt', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildPtrToInt', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildIntToPtr', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildBitCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildAddrSpaceCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildZExtOrBitCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSExtOrBitCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildTruncOrBitCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCast', [.voidPtr, .int, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildPointerCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildIntCast2', [.voidPtr, .voidPtr, .voidPtr, .int, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFPCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildIntCast', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetCastOpcode', [.voidPtr, .int, .voidPtr, .int], .int)
    ffi.cfunc('LLVMBuildICmp', [.voidPtr, .int, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFCmp', [.voidPtr, .int, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildPhi', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildCall2', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildSelect', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildVAArg', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildExtractElement', [.voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildInsertElement', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildShuffleVector', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildExtractValue', [.voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildInsertValue', [.voidPtr, .voidPtr, .voidPtr, .uint, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFreeze', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildIsNull', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildIsNotNull', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildPtrDiff2', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildFence', [.voidPtr, .int, .int, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMBuildAtomicRMW', [.voidPtr, .int, .voidPtr, .voidPtr, .int, .int], .voidPtr)
    ffi.cfunc('LLVMBuildAtomicCmpXchg', [.voidPtr, .voidPtr, .voidPtr, .voidPtr, .int, .int, .int], .voidPtr)
    ffi.cfunc('LLVMGetNumMaskElements', [.voidPtr], .uint)
    ffi.cfunc('LLVMGetUndefMaskElem', [], .int)
    ffi.cfunc('LLVMGetMaskValue', [.voidPtr, .uint], .int)
    ffi.cfunc('LLVMIsAtomicSingleThread', [.voidPtr], .int)
    ffi.cfunc('LLVMSetAtomicSingleThread', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetCmpXchgSuccessOrdering', [.voidPtr], .int)
    ffi.cfunc('LLVMSetCmpXchgSuccessOrdering', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMGetCmpXchgFailureOrdering', [.voidPtr], .int)
    ffi.cfunc('LLVMSetCmpXchgFailureOrdering', [.voidPtr, .int], .void)
    ffi.cfunc('LLVMCreateModuleProviderForExistingModule', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeModuleProvider', [.voidPtr], .void)
    ffi.cfunc('LLVMCreateMemoryBufferWithContentsOfFile', [.voidPtr, .voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMCreateMemoryBufferWithSTDIN', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMCreateMemoryBufferWithMemoryRange', [.voidPtr, .long, .voidPtr, .int], .voidPtr)
    ffi.cfunc('LLVMCreateMemoryBufferWithMemoryRangeCopy', [.voidPtr, .long, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetBufferStart', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetBufferSize', [.voidPtr], .long)
    ffi.cfunc('LLVMDisposeMemoryBuffer', [.voidPtr], .void)
    ffi.cfunc('LLVMCreatePassManager', [], .voidPtr)
    ffi.cfunc('LLVMCreateFunctionPassManagerForModule', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCreateFunctionPassManager', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMRunPassManager', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMInitializeFunctionPassManager', [.voidPtr], .int)
    ffi.cfunc('LLVMRunFunctionPassManager', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMFinalizeFunctionPassManager', [.voidPtr], .int)
    ffi.cfunc('LLVMDisposePassManager', [.voidPtr], .void)
    ffi.cfunc('LLVMStartMultithreaded', [], .int)
    ffi.cfunc('LLVMStopMultithreaded', [], .void)
    ffi.cfunc('LLVMIsMultithreaded', [], .int)
    ffi.cfunc('LLVMCreateBinary', [.voidPtr, .voidPtr, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeBinary', [.voidPtr], .void)
    ffi.cfunc('LLVMBinaryCopyMemoryBuffer', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMBinaryGetType', [.voidPtr], .int)
    ffi.cfunc('LLVMMachOUniversalBinaryCopyObjectForArch', [.voidPtr, .voidPtr, .long, .voidPtr], .voidPtr)
    ffi.cfunc('LLVMObjectFileCopySectionIterator', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMObjectFileIsSectionIteratorAtEnd', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMObjectFileCopySymbolIterator', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMObjectFileIsSymbolIteratorAtEnd', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMDisposeSectionIterator', [.voidPtr], .void)
    ffi.cfunc('LLVMMoveToNextSection', [.voidPtr], .void)
    ffi.cfunc('LLVMMoveToContainingSection', [.voidPtr, .voidPtr], .void)
    ffi.cfunc('LLVMDisposeSymbolIterator', [.voidPtr], .void)
    ffi.cfunc('LLVMMoveToNextSymbol', [.voidPtr], .void)
    ffi.cfunc('LLVMGetSectionName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetSectionSize', [.voidPtr], .ulong)
    ffi.cfunc('LLVMGetSectionContents', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetSectionAddress', [.voidPtr], .ulong)
    ffi.cfunc('LLVMGetSectionContainsSymbol', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMGetRelocations', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeRelocationIterator', [.voidPtr], .void)
    ffi.cfunc('LLVMIsRelocationIteratorAtEnd', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMMoveToNextRelocation', [.voidPtr], .void)
    ffi.cfunc('LLVMGetSymbolName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetSymbolAddress', [.voidPtr], .ulong)
    ffi.cfunc('LLVMGetSymbolSize', [.voidPtr], .ulong)
    ffi.cfunc('LLVMGetRelocationOffset', [.voidPtr], .ulong)
    ffi.cfunc('LLVMGetRelocationSymbol', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetRelocationType', [.voidPtr], .ulong)
    ffi.cfunc('LLVMGetRelocationTypeName', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMGetRelocationValueString', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMCreateObjectFile', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMDisposeObjectFile', [.voidPtr], .void)
    ffi.cfunc('LLVMGetSections', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsSectionIteratorAtEnd', [.voidPtr, .voidPtr], .int)
    ffi.cfunc('LLVMGetSymbols', [.voidPtr], .voidPtr)
    ffi.cfunc('LLVMIsSymbolIteratorAtEnd', [.voidPtr, .voidPtr], .int)
    my lib = ffi.bindLib('libLLVM.dylib', [genMap: true])
    InstallFatalErrorHandler = lib.LLVMInstallFatalErrorHandler
    ResetFatalErrorHandler = lib.LLVMResetFatalErrorHandler
    EnablePrettyStackTrace = lib.LLVMEnablePrettyStackTrace
    Shutdown = lib.LLVMShutdown
    GetVersion = lib.LLVMGetVersion
    CreateMessage = lib.LLVMCreateMessage
    DisposeMessage = lib.LLVMDisposeMessage
    ContextCreate = lib.LLVMContextCreate
    GetGlobalContext = lib.LLVMGetGlobalContext
    ContextSetDiagnosticHandler = lib.LLVMContextSetDiagnosticHandler
    ContextGetDiagnosticHandler = lib.LLVMContextGetDiagnosticHandler
    ContextGetDiagnosticContext = lib.LLVMContextGetDiagnosticContext
    ContextSetYieldCallback = lib.LLVMContextSetYieldCallback
    ContextShouldDiscardValueNames = lib.LLVMContextShouldDiscardValueNames
    ContextSetDiscardValueNames = lib.LLVMContextSetDiscardValueNames
    ContextDispose = lib.LLVMContextDispose
    GetDiagInfoDescription = lib.LLVMGetDiagInfoDescription
    GetDiagInfoSeverity = lib.LLVMGetDiagInfoSeverity
    GetMDKindIDInContext = lib.LLVMGetMDKindIDInContext
    GetMDKindID = lib.LLVMGetMDKindID
    GetEnumAttributeKindForName = lib.LLVMGetEnumAttributeKindForName
    GetLastEnumAttributeKind = lib.LLVMGetLastEnumAttributeKind
    CreateEnumAttribute = lib.LLVMCreateEnumAttribute
    GetEnumAttributeKind = lib.LLVMGetEnumAttributeKind
    GetEnumAttributeValue = lib.LLVMGetEnumAttributeValue
    CreateTypeAttribute = lib.LLVMCreateTypeAttribute
    GetTypeAttributeValue = lib.LLVMGetTypeAttributeValue
    CreateStringAttribute = lib.LLVMCreateStringAttribute
    GetStringAttributeKind = lib.LLVMGetStringAttributeKind
    GetStringAttributeValue = lib.LLVMGetStringAttributeValue
    IsEnumAttribute = lib.LLVMIsEnumAttribute
    IsStringAttribute = lib.LLVMIsStringAttribute
    IsTypeAttribute = lib.LLVMIsTypeAttribute
    GetTypeByName2 = lib.LLVMGetTypeByName2
    ModuleCreateWithName = lib.LLVMModuleCreateWithName
    ModuleCreateWithNameInContext = lib.LLVMModuleCreateWithNameInContext
    CloneModule = lib.LLVMCloneModule
    DisposeModule = lib.LLVMDisposeModule
    GetModuleIdentifier = lib.LLVMGetModuleIdentifier
    SetModuleIdentifier = lib.LLVMSetModuleIdentifier
    GetSourceFileName = lib.LLVMGetSourceFileName
    SetSourceFileName = lib.LLVMSetSourceFileName
    GetDataLayoutStr = lib.LLVMGetDataLayoutStr
    GetDataLayout = lib.LLVMGetDataLayout
    SetDataLayout = lib.LLVMSetDataLayout
    GetTarget = lib.LLVMGetTarget
    SetTarget = lib.LLVMSetTarget
    CopyModuleFlagsMetadata = lib.LLVMCopyModuleFlagsMetadata
    DisposeModuleFlagsMetadata = lib.LLVMDisposeModuleFlagsMetadata
    ModuleFlagEntriesGetFlagBehavior = lib.LLVMModuleFlagEntriesGetFlagBehavior
    ModuleFlagEntriesGetKey = lib.LLVMModuleFlagEntriesGetKey
    ModuleFlagEntriesGetMetadata = lib.LLVMModuleFlagEntriesGetMetadata
    GetModuleFlag = lib.LLVMGetModuleFlag
    AddModuleFlag = lib.LLVMAddModuleFlag
    DumpModule = lib.LLVMDumpModule
    PrintModuleToFile = lib.LLVMPrintModuleToFile
    PrintModuleToString = lib.LLVMPrintModuleToString
    GetModuleInlineAsm = lib.LLVMGetModuleInlineAsm
    SetModuleInlineAsm2 = lib.LLVMSetModuleInlineAsm2
    AppendModuleInlineAsm = lib.LLVMAppendModuleInlineAsm
    GetInlineAsm = lib.LLVMGetInlineAsm
    GetModuleContext = lib.LLVMGetModuleContext
    GetTypeByName = lib.LLVMGetTypeByName
    GetFirstNamedMetadata = lib.LLVMGetFirstNamedMetadata
    GetLastNamedMetadata = lib.LLVMGetLastNamedMetadata
    GetNextNamedMetadata = lib.LLVMGetNextNamedMetadata
    GetPreviousNamedMetadata = lib.LLVMGetPreviousNamedMetadata
    GetNamedMetadata = lib.LLVMGetNamedMetadata
    GetOrInsertNamedMetadata = lib.LLVMGetOrInsertNamedMetadata
    GetNamedMetadataName = lib.LLVMGetNamedMetadataName
    GetNamedMetadataNumOperands = lib.LLVMGetNamedMetadataNumOperands
    GetNamedMetadataOperands = lib.LLVMGetNamedMetadataOperands
    AddNamedMetadataOperand = lib.LLVMAddNamedMetadataOperand
    GetDebugLocDirectory = lib.LLVMGetDebugLocDirectory
    GetDebugLocFilename = lib.LLVMGetDebugLocFilename
    GetDebugLocLine = lib.LLVMGetDebugLocLine
    GetDebugLocColumn = lib.LLVMGetDebugLocColumn
    AddFunction = lib.LLVMAddFunction
    GetNamedFunction = lib.LLVMGetNamedFunction
    GetFirstFunction = lib.LLVMGetFirstFunction
    GetLastFunction = lib.LLVMGetLastFunction
    GetNextFunction = lib.LLVMGetNextFunction
    GetPreviousFunction = lib.LLVMGetPreviousFunction
    SetModuleInlineAsm = lib.LLVMSetModuleInlineAsm
    GetTypeKind = lib.LLVMGetTypeKind
    TypeIsSized = lib.LLVMTypeIsSized
    GetTypeContext = lib.LLVMGetTypeContext
    DumpType = lib.LLVMDumpType
    PrintTypeToString = lib.LLVMPrintTypeToString
    Int1TypeInContext = lib.LLVMInt1TypeInContext
    Int8TypeInContext = lib.LLVMInt8TypeInContext
    Int16TypeInContext = lib.LLVMInt16TypeInContext
    Int32TypeInContext = lib.LLVMInt32TypeInContext
    Int64TypeInContext = lib.LLVMInt64TypeInContext
    Int128TypeInContext = lib.LLVMInt128TypeInContext
    IntTypeInContext = lib.LLVMIntTypeInContext
    Int1Type = lib.LLVMInt1Type
    Int8Type = lib.LLVMInt8Type
    Int16Type = lib.LLVMInt16Type
    Int32Type = lib.LLVMInt32Type
    Int64Type = lib.LLVMInt64Type
    Int128Type = lib.LLVMInt128Type
    IntType = lib.LLVMIntType
    GetIntTypeWidth = lib.LLVMGetIntTypeWidth
    HalfTypeInContext = lib.LLVMHalfTypeInContext
    BFloatTypeInContext = lib.LLVMBFloatTypeInContext
    FloatTypeInContext = lib.LLVMFloatTypeInContext
    DoubleTypeInContext = lib.LLVMDoubleTypeInContext
    X86FP80TypeInContext = lib.LLVMX86FP80TypeInContext
    FP128TypeInContext = lib.LLVMFP128TypeInContext
    PPCFP128TypeInContext = lib.LLVMPPCFP128TypeInContext
    HalfType = lib.LLVMHalfType
    BFloatType = lib.LLVMBFloatType
    FloatType = lib.LLVMFloatType
    DoubleType = lib.LLVMDoubleType
    X86FP80Type = lib.LLVMX86FP80Type
    FP128Type = lib.LLVMFP128Type
    PPCFP128Type = lib.LLVMPPCFP128Type
    FunctionType = lib.LLVMFunctionType
    IsFunctionVarArg = lib.LLVMIsFunctionVarArg
    GetReturnType = lib.LLVMGetReturnType
    CountParamTypes = lib.LLVMCountParamTypes
    GetParamTypes = lib.LLVMGetParamTypes
    StructTypeInContext = lib.LLVMStructTypeInContext
    StructType = lib.LLVMStructType
    StructCreateNamed = lib.LLVMStructCreateNamed
    GetStructName = lib.LLVMGetStructName
    StructSetBody = lib.LLVMStructSetBody
    CountStructElementTypes = lib.LLVMCountStructElementTypes
    GetStructElementTypes = lib.LLVMGetStructElementTypes
    StructGetTypeAtIndex = lib.LLVMStructGetTypeAtIndex
    IsPackedStruct = lib.LLVMIsPackedStruct
    IsOpaqueStruct = lib.LLVMIsOpaqueStruct
    IsLiteralStruct = lib.LLVMIsLiteralStruct
    GetElementType = lib.LLVMGetElementType
    GetSubtypes = lib.LLVMGetSubtypes
    GetNumContainedTypes = lib.LLVMGetNumContainedTypes
    ArrayType = lib.LLVMArrayType
    ArrayType2 = lib.LLVMArrayType2
    GetArrayLength = lib.LLVMGetArrayLength
    GetArrayLength2 = lib.LLVMGetArrayLength2
    PointerType = lib.LLVMPointerType
    PointerTypeIsOpaque = lib.LLVMPointerTypeIsOpaque
    PointerTypeInContext = lib.LLVMPointerTypeInContext
    GetPointerAddressSpace = lib.LLVMGetPointerAddressSpace
    VectorType = lib.LLVMVectorType
    ScalableVectorType = lib.LLVMScalableVectorType
    GetVectorSize = lib.LLVMGetVectorSize
    VoidTypeInContext = lib.LLVMVoidTypeInContext
    LabelTypeInContext = lib.LLVMLabelTypeInContext
    X86MMXTypeInContext = lib.LLVMX86MMXTypeInContext
    X86AMXTypeInContext = lib.LLVMX86AMXTypeInContext
    TokenTypeInContext = lib.LLVMTokenTypeInContext
    MetadataTypeInContext = lib.LLVMMetadataTypeInContext
    VoidType = lib.LLVMVoidType
    LabelType = lib.LLVMLabelType
    X86MMXType = lib.LLVMX86MMXType
    X86AMXType = lib.LLVMX86AMXType
    TargetExtTypeInContext = lib.LLVMTargetExtTypeInContext
    TypeOf = lib.LLVMTypeOf
    GetValueKind = lib.LLVMGetValueKind
    GetValueName2 = lib.LLVMGetValueName2
    SetValueName2 = lib.LLVMSetValueName2
    DumpValue = lib.LLVMDumpValue
    PrintValueToString = lib.LLVMPrintValueToString
    ReplaceAllUsesWith = lib.LLVMReplaceAllUsesWith
    IsConstant = lib.LLVMIsConstant
    IsUndef = lib.LLVMIsUndef
    IsPoison = lib.LLVMIsPoison
    IsAArgument = lib.LLVMIsAArgument
    IsABasicBlock = lib.LLVMIsABasicBlock
    IsAInlineAsm = lib.LLVMIsAInlineAsm
    IsAUser = lib.LLVMIsAUser
    IsAConstant = lib.LLVMIsAConstant
    IsABlockAddress = lib.LLVMIsABlockAddress
    IsAConstantAggregateZero = lib.LLVMIsAConstantAggregateZero
    IsAConstantArray = lib.LLVMIsAConstantArray
    IsAConstantDataSequential = lib.LLVMIsAConstantDataSequential
    IsAConstantDataArray = lib.LLVMIsAConstantDataArray
    IsAConstantDataVector = lib.LLVMIsAConstantDataVector
    IsAConstantExpr = lib.LLVMIsAConstantExpr
    IsAConstantFP = lib.LLVMIsAConstantFP
    IsAConstantInt = lib.LLVMIsAConstantInt
    IsAConstantPointerNull = lib.LLVMIsAConstantPointerNull
    IsAConstantStruct = lib.LLVMIsAConstantStruct
    IsAConstantTokenNone = lib.LLVMIsAConstantTokenNone
    IsAConstantVector = lib.LLVMIsAConstantVector
    IsAGlobalValue = lib.LLVMIsAGlobalValue
    IsAGlobalAlias = lib.LLVMIsAGlobalAlias
    IsAGlobalObject = lib.LLVMIsAGlobalObject
    IsAFunction = lib.LLVMIsAFunction
    IsAGlobalVariable = lib.LLVMIsAGlobalVariable
    IsAGlobalIFunc = lib.LLVMIsAGlobalIFunc
    IsAUndefValue = lib.LLVMIsAUndefValue
    IsAPoisonValue = lib.LLVMIsAPoisonValue
    IsAInstruction = lib.LLVMIsAInstruction
    IsAUnaryOperator = lib.LLVMIsAUnaryOperator
    IsABinaryOperator = lib.LLVMIsABinaryOperator
    IsACallInst = lib.LLVMIsACallInst
    IsAIntrinsicInst = lib.LLVMIsAIntrinsicInst
    IsADbgInfoIntrinsic = lib.LLVMIsADbgInfoIntrinsic
    IsADbgVariableIntrinsic = lib.LLVMIsADbgVariableIntrinsic
    IsADbgDeclareInst = lib.LLVMIsADbgDeclareInst
    IsADbgLabelInst = lib.LLVMIsADbgLabelInst
    IsAMemIntrinsic = lib.LLVMIsAMemIntrinsic
    IsAMemCpyInst = lib.LLVMIsAMemCpyInst
    IsAMemMoveInst = lib.LLVMIsAMemMoveInst
    IsAMemSetInst = lib.LLVMIsAMemSetInst
    IsACmpInst = lib.LLVMIsACmpInst
    IsAFCmpInst = lib.LLVMIsAFCmpInst
    IsAICmpInst = lib.LLVMIsAICmpInst
    IsAExtractElementInst = lib.LLVMIsAExtractElementInst
    IsAGetElementPtrInst = lib.LLVMIsAGetElementPtrInst
    IsAInsertElementInst = lib.LLVMIsAInsertElementInst
    IsAInsertValueInst = lib.LLVMIsAInsertValueInst
    IsALandingPadInst = lib.LLVMIsALandingPadInst
    IsAPHINode = lib.LLVMIsAPHINode
    IsASelectInst = lib.LLVMIsASelectInst
    IsAShuffleVectorInst = lib.LLVMIsAShuffleVectorInst
    IsAStoreInst = lib.LLVMIsAStoreInst
    IsABranchInst = lib.LLVMIsABranchInst
    IsAIndirectBrInst = lib.LLVMIsAIndirectBrInst
    IsAInvokeInst = lib.LLVMIsAInvokeInst
    IsAReturnInst = lib.LLVMIsAReturnInst
    IsASwitchInst = lib.LLVMIsASwitchInst
    IsAUnreachableInst = lib.LLVMIsAUnreachableInst
    IsAResumeInst = lib.LLVMIsAResumeInst
    IsACleanupReturnInst = lib.LLVMIsACleanupReturnInst
    IsACatchReturnInst = lib.LLVMIsACatchReturnInst
    IsACatchSwitchInst = lib.LLVMIsACatchSwitchInst
    IsACallBrInst = lib.LLVMIsACallBrInst
    IsAFuncletPadInst = lib.LLVMIsAFuncletPadInst
    IsACatchPadInst = lib.LLVMIsACatchPadInst
    IsACleanupPadInst = lib.LLVMIsACleanupPadInst
    IsAUnaryInstruction = lib.LLVMIsAUnaryInstruction
    IsAAllocaInst = lib.LLVMIsAAllocaInst
    IsACastInst = lib.LLVMIsACastInst
    IsAAddrSpaceCastInst = lib.LLVMIsAAddrSpaceCastInst
    IsABitCastInst = lib.LLVMIsABitCastInst
    IsAFPExtInst = lib.LLVMIsAFPExtInst
    IsAFPToSIInst = lib.LLVMIsAFPToSIInst
    IsAFPToUIInst = lib.LLVMIsAFPToUIInst
    IsAFPTruncInst = lib.LLVMIsAFPTruncInst
    IsAIntToPtrInst = lib.LLVMIsAIntToPtrInst
    IsAPtrToIntInst = lib.LLVMIsAPtrToIntInst
    IsASExtInst = lib.LLVMIsASExtInst
    IsASIToFPInst = lib.LLVMIsASIToFPInst
    IsATruncInst = lib.LLVMIsATruncInst
    IsAUIToFPInst = lib.LLVMIsAUIToFPInst
    IsAZExtInst = lib.LLVMIsAZExtInst
    IsAExtractValueInst = lib.LLVMIsAExtractValueInst
    IsALoadInst = lib.LLVMIsALoadInst
    IsAVAArgInst = lib.LLVMIsAVAArgInst
    IsAFreezeInst = lib.LLVMIsAFreezeInst
    IsAAtomicCmpXchgInst = lib.LLVMIsAAtomicCmpXchgInst
    IsAAtomicRMWInst = lib.LLVMIsAAtomicRMWInst
    IsAFenceInst = lib.LLVMIsAFenceInst
    IsAMDNode = lib.LLVMIsAMDNode
    IsAValueAsMetadata = lib.LLVMIsAValueAsMetadata
    IsAMDString = lib.LLVMIsAMDString
    GetValueName = lib.LLVMGetValueName
    SetValueName = lib.LLVMSetValueName
    GetFirstUse = lib.LLVMGetFirstUse
    GetNextUse = lib.LLVMGetNextUse
    GetUser = lib.LLVMGetUser
    GetUsedValue = lib.LLVMGetUsedValue
    GetOperand = lib.LLVMGetOperand
    GetOperandUse = lib.LLVMGetOperandUse
    SetOperand = lib.LLVMSetOperand
    GetNumOperands = lib.LLVMGetNumOperands
    ConstNull = lib.LLVMConstNull
    ConstAllOnes = lib.LLVMConstAllOnes
    GetUndef = lib.LLVMGetUndef
    GetPoison = lib.LLVMGetPoison
    IsNull = lib.LLVMIsNull
    ConstPointerNull = lib.LLVMConstPointerNull
    ConstInt = lib.LLVMConstInt
    ConstIntOfArbitraryPrecision = lib.LLVMConstIntOfArbitraryPrecision
    ConstIntOfString = lib.LLVMConstIntOfString
    ConstIntOfStringAndSize = lib.LLVMConstIntOfStringAndSize
    ConstReal = lib.LLVMConstReal
    ConstRealOfString = lib.LLVMConstRealOfString
    ConstRealOfStringAndSize = lib.LLVMConstRealOfStringAndSize
    ConstIntGetZExtValue = lib.LLVMConstIntGetZExtValue
    ConstIntGetSExtValue = lib.LLVMConstIntGetSExtValue
    ConstRealGetDouble = lib.LLVMConstRealGetDouble
    ConstStringInContext = lib.LLVMConstStringInContext
    ConstString = lib.LLVMConstString
    IsConstantString = lib.LLVMIsConstantString
    GetAsString = lib.LLVMGetAsString
    ConstStructInContext = lib.LLVMConstStructInContext
    ConstStruct = lib.LLVMConstStruct
    ConstArray = lib.LLVMConstArray
    ConstArray2 = lib.LLVMConstArray2
    ConstNamedStruct = lib.LLVMConstNamedStruct
    GetAggregateElement = lib.LLVMGetAggregateElement
    GetElementAsConstant = lib.LLVMGetElementAsConstant
    ConstVector = lib.LLVMConstVector
    GetConstOpcode = lib.LLVMGetConstOpcode
    AlignOf = lib.LLVMAlignOf
    SizeOf = lib.LLVMSizeOf
    ConstNeg = lib.LLVMConstNeg
    ConstNSWNeg = lib.LLVMConstNSWNeg
    ConstNUWNeg = lib.LLVMConstNUWNeg
    ConstNot = lib.LLVMConstNot
    ConstAdd = lib.LLVMConstAdd
    ConstNSWAdd = lib.LLVMConstNSWAdd
    ConstNUWAdd = lib.LLVMConstNUWAdd
    ConstSub = lib.LLVMConstSub
    ConstNSWSub = lib.LLVMConstNSWSub
    ConstNUWSub = lib.LLVMConstNUWSub
    ConstMul = lib.LLVMConstMul
    ConstNSWMul = lib.LLVMConstNSWMul
    ConstNUWMul = lib.LLVMConstNUWMul
    ConstAnd = lib.LLVMConstAnd
    ConstOr = lib.LLVMConstOr
    ConstXor = lib.LLVMConstXor
    ConstICmp = lib.LLVMConstICmp
    ConstFCmp = lib.LLVMConstFCmp
    ConstShl = lib.LLVMConstShl
    ConstLShr = lib.LLVMConstLShr
    ConstAShr = lib.LLVMConstAShr
    ConstGEP2 = lib.LLVMConstGEP2
    ConstInBoundsGEP2 = lib.LLVMConstInBoundsGEP2
    ConstTrunc = lib.LLVMConstTrunc
    ConstSExt = lib.LLVMConstSExt
    ConstZExt = lib.LLVMConstZExt
    ConstFPTrunc = lib.LLVMConstFPTrunc
    ConstFPExt = lib.LLVMConstFPExt
    ConstUIToFP = lib.LLVMConstUIToFP
    ConstSIToFP = lib.LLVMConstSIToFP
    ConstFPToUI = lib.LLVMConstFPToUI
    ConstFPToSI = lib.LLVMConstFPToSI
    ConstPtrToInt = lib.LLVMConstPtrToInt
    ConstIntToPtr = lib.LLVMConstIntToPtr
    ConstBitCast = lib.LLVMConstBitCast
    ConstAddrSpaceCast = lib.LLVMConstAddrSpaceCast
    ConstZExtOrBitCast = lib.LLVMConstZExtOrBitCast
    ConstSExtOrBitCast = lib.LLVMConstSExtOrBitCast
    ConstTruncOrBitCast = lib.LLVMConstTruncOrBitCast
    ConstPointerCast = lib.LLVMConstPointerCast
    ConstIntCast = lib.LLVMConstIntCast
    ConstFPCast = lib.LLVMConstFPCast
    ConstExtractElement = lib.LLVMConstExtractElement
    ConstInsertElement = lib.LLVMConstInsertElement
    ConstShuffleVector = lib.LLVMConstShuffleVector
    BlockAddress = lib.LLVMBlockAddress
    ConstInlineAsm = lib.LLVMConstInlineAsm
    GetGlobalParent = lib.LLVMGetGlobalParent
    IsDeclaration = lib.LLVMIsDeclaration
    GetLinkage = lib.LLVMGetLinkage
    SetLinkage = lib.LLVMSetLinkage
    GetSection = lib.LLVMGetSection
    SetSection = lib.LLVMSetSection
    GetVisibility = lib.LLVMGetVisibility
    SetVisibility = lib.LLVMSetVisibility
    GetDLLStorageClass = lib.LLVMGetDLLStorageClass
    SetDLLStorageClass = lib.LLVMSetDLLStorageClass
    GetUnnamedAddress = lib.LLVMGetUnnamedAddress
    SetUnnamedAddress = lib.LLVMSetUnnamedAddress
    GlobalGetValueType = lib.LLVMGlobalGetValueType
    HasUnnamedAddr = lib.LLVMHasUnnamedAddr
    SetUnnamedAddr = lib.LLVMSetUnnamedAddr
    GetAlignment = lib.LLVMGetAlignment
    SetAlignment = lib.LLVMSetAlignment
    GlobalSetMetadata = lib.LLVMGlobalSetMetadata
    GlobalEraseMetadata = lib.LLVMGlobalEraseMetadata
    GlobalClearMetadata = lib.LLVMGlobalClearMetadata
    GlobalCopyAllMetadata = lib.LLVMGlobalCopyAllMetadata
    DisposeValueMetadataEntries = lib.LLVMDisposeValueMetadataEntries
    ValueMetadataEntriesGetKind = lib.LLVMValueMetadataEntriesGetKind
    ValueMetadataEntriesGetMetadata = lib.LLVMValueMetadataEntriesGetMetadata
    AddGlobal = lib.LLVMAddGlobal
    AddGlobalInAddressSpace = lib.LLVMAddGlobalInAddressSpace
    GetNamedGlobal = lib.LLVMGetNamedGlobal
    GetFirstGlobal = lib.LLVMGetFirstGlobal
    GetLastGlobal = lib.LLVMGetLastGlobal
    GetNextGlobal = lib.LLVMGetNextGlobal
    GetPreviousGlobal = lib.LLVMGetPreviousGlobal
    DeleteGlobal = lib.LLVMDeleteGlobal
    GetInitializer = lib.LLVMGetInitializer
    SetInitializer = lib.LLVMSetInitializer
    IsThreadLocal = lib.LLVMIsThreadLocal
    SetThreadLocal = lib.LLVMSetThreadLocal
    IsGlobalConstant = lib.LLVMIsGlobalConstant
    SetGlobalConstant = lib.LLVMSetGlobalConstant
    GetThreadLocalMode = lib.LLVMGetThreadLocalMode
    SetThreadLocalMode = lib.LLVMSetThreadLocalMode
    IsExternallyInitialized = lib.LLVMIsExternallyInitialized
    SetExternallyInitialized = lib.LLVMSetExternallyInitialized
    AddAlias2 = lib.LLVMAddAlias2
    GetNamedGlobalAlias = lib.LLVMGetNamedGlobalAlias
    GetFirstGlobalAlias = lib.LLVMGetFirstGlobalAlias
    GetLastGlobalAlias = lib.LLVMGetLastGlobalAlias
    GetNextGlobalAlias = lib.LLVMGetNextGlobalAlias
    GetPreviousGlobalAlias = lib.LLVMGetPreviousGlobalAlias
    AliasGetAliasee = lib.LLVMAliasGetAliasee
    AliasSetAliasee = lib.LLVMAliasSetAliasee
    DeleteFunction = lib.LLVMDeleteFunction
    HasPersonalityFn = lib.LLVMHasPersonalityFn
    GetPersonalityFn = lib.LLVMGetPersonalityFn
    SetPersonalityFn = lib.LLVMSetPersonalityFn
    LookupIntrinsicID = lib.LLVMLookupIntrinsicID
    GetIntrinsicID = lib.LLVMGetIntrinsicID
    GetIntrinsicDeclaration = lib.LLVMGetIntrinsicDeclaration
    IntrinsicGetType = lib.LLVMIntrinsicGetType
    IntrinsicGetName = lib.LLVMIntrinsicGetName
    IntrinsicCopyOverloadedName = lib.LLVMIntrinsicCopyOverloadedName
    IntrinsicCopyOverloadedName2 = lib.LLVMIntrinsicCopyOverloadedName2
    IntrinsicIsOverloaded = lib.LLVMIntrinsicIsOverloaded
    GetFunctionCallConv = lib.LLVMGetFunctionCallConv
    SetFunctionCallConv = lib.LLVMSetFunctionCallConv
    GetGC = lib.LLVMGetGC
    SetGC = lib.LLVMSetGC
    AddAttributeAtIndex = lib.LLVMAddAttributeAtIndex
    GetAttributeCountAtIndex = lib.LLVMGetAttributeCountAtIndex
    GetAttributesAtIndex = lib.LLVMGetAttributesAtIndex
    GetEnumAttributeAtIndex = lib.LLVMGetEnumAttributeAtIndex
    GetStringAttributeAtIndex = lib.LLVMGetStringAttributeAtIndex
    RemoveEnumAttributeAtIndex = lib.LLVMRemoveEnumAttributeAtIndex
    RemoveStringAttributeAtIndex = lib.LLVMRemoveStringAttributeAtIndex
    AddTargetDependentFunctionAttr = lib.LLVMAddTargetDependentFunctionAttr
    CountParams = lib.LLVMCountParams
    GetParams = lib.LLVMGetParams
    GetParam = lib.LLVMGetParam
    GetParamParent = lib.LLVMGetParamParent
    GetFirstParam = lib.LLVMGetFirstParam
    GetLastParam = lib.LLVMGetLastParam
    GetNextParam = lib.LLVMGetNextParam
    GetPreviousParam = lib.LLVMGetPreviousParam
    SetParamAlignment = lib.LLVMSetParamAlignment
    AddGlobalIFunc = lib.LLVMAddGlobalIFunc
    GetNamedGlobalIFunc = lib.LLVMGetNamedGlobalIFunc
    GetFirstGlobalIFunc = lib.LLVMGetFirstGlobalIFunc
    GetLastGlobalIFunc = lib.LLVMGetLastGlobalIFunc
    GetNextGlobalIFunc = lib.LLVMGetNextGlobalIFunc
    GetPreviousGlobalIFunc = lib.LLVMGetPreviousGlobalIFunc
    GetGlobalIFuncResolver = lib.LLVMGetGlobalIFuncResolver
    SetGlobalIFuncResolver = lib.LLVMSetGlobalIFuncResolver
    EraseGlobalIFunc = lib.LLVMEraseGlobalIFunc
    RemoveGlobalIFunc = lib.LLVMRemoveGlobalIFunc
    MDStringInContext2 = lib.LLVMMDStringInContext2
    MDNodeInContext2 = lib.LLVMMDNodeInContext2
    MetadataAsValue = lib.LLVMMetadataAsValue
    ValueAsMetadata = lib.LLVMValueAsMetadata
    GetMDString = lib.LLVMGetMDString
    GetMDNodeNumOperands = lib.LLVMGetMDNodeNumOperands
    GetMDNodeOperands = lib.LLVMGetMDNodeOperands
    ReplaceMDNodeOperandWith = lib.LLVMReplaceMDNodeOperandWith
    MDStringInContext = lib.LLVMMDStringInContext
    MDString = lib.LLVMMDString
    MDNodeInContext = lib.LLVMMDNodeInContext
    MDNode = lib.LLVMMDNode
    BasicBlockAsValue = lib.LLVMBasicBlockAsValue
    ValueIsBasicBlock = lib.LLVMValueIsBasicBlock
    ValueAsBasicBlock = lib.LLVMValueAsBasicBlock
    GetBasicBlockName = lib.LLVMGetBasicBlockName
    GetBasicBlockParent = lib.LLVMGetBasicBlockParent
    GetBasicBlockTerminator = lib.LLVMGetBasicBlockTerminator
    CountBasicBlocks = lib.LLVMCountBasicBlocks
    GetBasicBlocks = lib.LLVMGetBasicBlocks
    GetFirstBasicBlock = lib.LLVMGetFirstBasicBlock
    GetLastBasicBlock = lib.LLVMGetLastBasicBlock
    GetNextBasicBlock = lib.LLVMGetNextBasicBlock
    GetPreviousBasicBlock = lib.LLVMGetPreviousBasicBlock
    GetEntryBasicBlock = lib.LLVMGetEntryBasicBlock
    InsertExistingBasicBlockAfterInsertBlock = lib.LLVMInsertExistingBasicBlockAfterInsertBlock
    AppendExistingBasicBlock = lib.LLVMAppendExistingBasicBlock
    CreateBasicBlockInContext = lib.LLVMCreateBasicBlockInContext
    AppendBasicBlockInContext = lib.LLVMAppendBasicBlockInContext
    AppendBasicBlock = lib.LLVMAppendBasicBlock
    InsertBasicBlockInContext = lib.LLVMInsertBasicBlockInContext
    InsertBasicBlock = lib.LLVMInsertBasicBlock
    DeleteBasicBlock = lib.LLVMDeleteBasicBlock
    RemoveBasicBlockFromParent = lib.LLVMRemoveBasicBlockFromParent
    MoveBasicBlockBefore = lib.LLVMMoveBasicBlockBefore
    MoveBasicBlockAfter = lib.LLVMMoveBasicBlockAfter
    GetFirstInstruction = lib.LLVMGetFirstInstruction
    GetLastInstruction = lib.LLVMGetLastInstruction
    HasMetadata = lib.LLVMHasMetadata
    GetMetadata = lib.LLVMGetMetadata
    SetMetadata = lib.LLVMSetMetadata
    InstructionGetAllMetadataOtherThanDebugLoc = lib.LLVMInstructionGetAllMetadataOtherThanDebugLoc
    GetInstructionParent = lib.LLVMGetInstructionParent
    GetNextInstruction = lib.LLVMGetNextInstruction
    GetPreviousInstruction = lib.LLVMGetPreviousInstruction
    InstructionRemoveFromParent = lib.LLVMInstructionRemoveFromParent
    InstructionEraseFromParent = lib.LLVMInstructionEraseFromParent
    DeleteInstruction = lib.LLVMDeleteInstruction
    GetInstructionOpcode = lib.LLVMGetInstructionOpcode
    GetICmpPredicate = lib.LLVMGetICmpPredicate
    GetFCmpPredicate = lib.LLVMGetFCmpPredicate
    InstructionClone = lib.LLVMInstructionClone
    IsATerminatorInst = lib.LLVMIsATerminatorInst
    GetNumArgOperands = lib.LLVMGetNumArgOperands
    SetInstructionCallConv = lib.LLVMSetInstructionCallConv
    GetInstructionCallConv = lib.LLVMGetInstructionCallConv
    SetInstrParamAlignment = lib.LLVMSetInstrParamAlignment
    AddCallSiteAttribute = lib.LLVMAddCallSiteAttribute
    GetCallSiteAttributeCount = lib.LLVMGetCallSiteAttributeCount
    GetCallSiteAttributes = lib.LLVMGetCallSiteAttributes
    GetCallSiteEnumAttribute = lib.LLVMGetCallSiteEnumAttribute
    GetCallSiteStringAttribute = lib.LLVMGetCallSiteStringAttribute
    RemoveCallSiteEnumAttribute = lib.LLVMRemoveCallSiteEnumAttribute
    RemoveCallSiteStringAttribute = lib.LLVMRemoveCallSiteStringAttribute
    GetCalledFunctionType = lib.LLVMGetCalledFunctionType
    GetCalledValue = lib.LLVMGetCalledValue
    IsTailCall = lib.LLVMIsTailCall
    SetTailCall = lib.LLVMSetTailCall
    GetNormalDest = lib.LLVMGetNormalDest
    GetUnwindDest = lib.LLVMGetUnwindDest
    SetNormalDest = lib.LLVMSetNormalDest
    SetUnwindDest = lib.LLVMSetUnwindDest
    GetNumSuccessors = lib.LLVMGetNumSuccessors
    GetSuccessor = lib.LLVMGetSuccessor
    SetSuccessor = lib.LLVMSetSuccessor
    IsConditional = lib.LLVMIsConditional
    GetCondition = lib.LLVMGetCondition
    SetCondition = lib.LLVMSetCondition
    GetSwitchDefaultDest = lib.LLVMGetSwitchDefaultDest
    GetAllocatedType = lib.LLVMGetAllocatedType
    IsInBounds = lib.LLVMIsInBounds
    SetIsInBounds = lib.LLVMSetIsInBounds
    GetGEPSourceElementType = lib.LLVMGetGEPSourceElementType
    AddIncoming = lib.LLVMAddIncoming
    CountIncoming = lib.LLVMCountIncoming
    GetIncomingValue = lib.LLVMGetIncomingValue
    GetIncomingBlock = lib.LLVMGetIncomingBlock
    GetNumIndices = lib.LLVMGetNumIndices
    GetIndices = lib.LLVMGetIndices
    CreateBuilderInContext = lib.LLVMCreateBuilderInContext
    CreateBuilder = lib.LLVMCreateBuilder
    PositionBuilder = lib.LLVMPositionBuilder
    PositionBuilderBefore = lib.LLVMPositionBuilderBefore
    PositionBuilderAtEnd = lib.LLVMPositionBuilderAtEnd
    GetInsertBlock = lib.LLVMGetInsertBlock
    ClearInsertionPosition = lib.LLVMClearInsertionPosition
    InsertIntoBuilder = lib.LLVMInsertIntoBuilder
    InsertIntoBuilderWithName = lib.LLVMInsertIntoBuilderWithName
    DisposeBuilder = lib.LLVMDisposeBuilder
    GetCurrentDebugLocation2 = lib.LLVMGetCurrentDebugLocation2
    SetCurrentDebugLocation2 = lib.LLVMSetCurrentDebugLocation2
    SetInstDebugLocation = lib.LLVMSetInstDebugLocation
    AddMetadataToInst = lib.LLVMAddMetadataToInst
    BuilderGetDefaultFPMathTag = lib.LLVMBuilderGetDefaultFPMathTag
    BuilderSetDefaultFPMathTag = lib.LLVMBuilderSetDefaultFPMathTag
    SetCurrentDebugLocation = lib.LLVMSetCurrentDebugLocation
    GetCurrentDebugLocation = lib.LLVMGetCurrentDebugLocation
    BuildRetVoid = lib.LLVMBuildRetVoid
    BuildRet = lib.LLVMBuildRet
    BuildAggregateRet = lib.LLVMBuildAggregateRet
    BuildBr = lib.LLVMBuildBr
    BuildCondBr = lib.LLVMBuildCondBr
    BuildSwitch = lib.LLVMBuildSwitch
    BuildIndirectBr = lib.LLVMBuildIndirectBr
    BuildInvoke2 = lib.LLVMBuildInvoke2
    BuildUnreachable = lib.LLVMBuildUnreachable
    BuildResume = lib.LLVMBuildResume
    BuildLandingPad = lib.LLVMBuildLandingPad
    BuildCleanupRet = lib.LLVMBuildCleanupRet
    BuildCatchRet = lib.LLVMBuildCatchRet
    BuildCatchPad = lib.LLVMBuildCatchPad
    BuildCleanupPad = lib.LLVMBuildCleanupPad
    BuildCatchSwitch = lib.LLVMBuildCatchSwitch
    AddCase = lib.LLVMAddCase
    AddDestination = lib.LLVMAddDestination
    GetNumClauses = lib.LLVMGetNumClauses
    GetClause = lib.LLVMGetClause
    AddClause = lib.LLVMAddClause
    IsCleanup = lib.LLVMIsCleanup
    SetCleanup = lib.LLVMSetCleanup
    AddHandler = lib.LLVMAddHandler
    GetNumHandlers = lib.LLVMGetNumHandlers
    GetHandlers = lib.LLVMGetHandlers
    GetArgOperand = lib.LLVMGetArgOperand
    SetArgOperand = lib.LLVMSetArgOperand
    GetParentCatchSwitch = lib.LLVMGetParentCatchSwitch
    SetParentCatchSwitch = lib.LLVMSetParentCatchSwitch
    BuildAdd = lib.LLVMBuildAdd
    BuildNSWAdd = lib.LLVMBuildNSWAdd
    BuildNUWAdd = lib.LLVMBuildNUWAdd
    BuildFAdd = lib.LLVMBuildFAdd
    BuildSub = lib.LLVMBuildSub
    BuildNSWSub = lib.LLVMBuildNSWSub
    BuildNUWSub = lib.LLVMBuildNUWSub
    BuildFSub = lib.LLVMBuildFSub
    BuildMul = lib.LLVMBuildMul
    BuildNSWMul = lib.LLVMBuildNSWMul
    BuildNUWMul = lib.LLVMBuildNUWMul
    BuildFMul = lib.LLVMBuildFMul
    BuildUDiv = lib.LLVMBuildUDiv
    BuildExactUDiv = lib.LLVMBuildExactUDiv
    BuildSDiv = lib.LLVMBuildSDiv
    BuildExactSDiv = lib.LLVMBuildExactSDiv
    BuildFDiv = lib.LLVMBuildFDiv
    BuildURem = lib.LLVMBuildURem
    BuildSRem = lib.LLVMBuildSRem
    BuildFRem = lib.LLVMBuildFRem
    BuildShl = lib.LLVMBuildShl
    BuildLShr = lib.LLVMBuildLShr
    BuildAShr = lib.LLVMBuildAShr
    BuildAnd = lib.LLVMBuildAnd
    BuildOr = lib.LLVMBuildOr
    BuildXor = lib.LLVMBuildXor
    BuildBinOp = lib.LLVMBuildBinOp
    BuildNeg = lib.LLVMBuildNeg
    BuildNSWNeg = lib.LLVMBuildNSWNeg
    BuildNUWNeg = lib.LLVMBuildNUWNeg
    BuildFNeg = lib.LLVMBuildFNeg
    BuildNot = lib.LLVMBuildNot
    GetNUW = lib.LLVMGetNUW
    SetNUW = lib.LLVMSetNUW
    GetNSW = lib.LLVMGetNSW
    SetNSW = lib.LLVMSetNSW
    GetExact = lib.LLVMGetExact
    SetExact = lib.LLVMSetExact
    BuildMalloc = lib.LLVMBuildMalloc
    BuildArrayMalloc = lib.LLVMBuildArrayMalloc
    BuildMemSet = lib.LLVMBuildMemSet
    BuildMemCpy = lib.LLVMBuildMemCpy
    BuildMemMove = lib.LLVMBuildMemMove
    BuildAlloca = lib.LLVMBuildAlloca
    BuildArrayAlloca = lib.LLVMBuildArrayAlloca
    BuildFree = lib.LLVMBuildFree
    BuildLoad2 = lib.LLVMBuildLoad2
    BuildStore = lib.LLVMBuildStore
    BuildGEP2 = lib.LLVMBuildGEP2
    BuildInBoundsGEP2 = lib.LLVMBuildInBoundsGEP2
    BuildStructGEP2 = lib.LLVMBuildStructGEP2
    BuildGlobalString = lib.LLVMBuildGlobalString
    BuildGlobalStringPtr = lib.LLVMBuildGlobalStringPtr
    GetVolatile = lib.LLVMGetVolatile
    SetVolatile = lib.LLVMSetVolatile
    GetWeak = lib.LLVMGetWeak
    SetWeak = lib.LLVMSetWeak
    GetOrdering = lib.LLVMGetOrdering
    SetOrdering = lib.LLVMSetOrdering
    GetAtomicRMWBinOp = lib.LLVMGetAtomicRMWBinOp
    SetAtomicRMWBinOp = lib.LLVMSetAtomicRMWBinOp
    BuildTrunc = lib.LLVMBuildTrunc
    BuildZExt = lib.LLVMBuildZExt
    BuildSExt = lib.LLVMBuildSExt
    BuildFPToUI = lib.LLVMBuildFPToUI
    BuildFPToSI = lib.LLVMBuildFPToSI
    BuildUIToFP = lib.LLVMBuildUIToFP
    BuildSIToFP = lib.LLVMBuildSIToFP
    BuildFPTrunc = lib.LLVMBuildFPTrunc
    BuildFPExt = lib.LLVMBuildFPExt
    BuildPtrToInt = lib.LLVMBuildPtrToInt
    BuildIntToPtr = lib.LLVMBuildIntToPtr
    BuildBitCast = lib.LLVMBuildBitCast
    BuildAddrSpaceCast = lib.LLVMBuildAddrSpaceCast
    BuildZExtOrBitCast = lib.LLVMBuildZExtOrBitCast
    BuildSExtOrBitCast = lib.LLVMBuildSExtOrBitCast
    BuildTruncOrBitCast = lib.LLVMBuildTruncOrBitCast
    BuildCast = lib.LLVMBuildCast
    BuildPointerCast = lib.LLVMBuildPointerCast
    BuildIntCast2 = lib.LLVMBuildIntCast2
    BuildFPCast = lib.LLVMBuildFPCast
    BuildIntCast = lib.LLVMBuildIntCast
    GetCastOpcode = lib.LLVMGetCastOpcode
    BuildICmp = lib.LLVMBuildICmp
    BuildFCmp = lib.LLVMBuildFCmp
    BuildPhi = lib.LLVMBuildPhi
    BuildCall2 = lib.LLVMBuildCall2
    BuildSelect = lib.LLVMBuildSelect
    BuildVAArg = lib.LLVMBuildVAArg
    BuildExtractElement = lib.LLVMBuildExtractElement
    BuildInsertElement = lib.LLVMBuildInsertElement
    BuildShuffleVector = lib.LLVMBuildShuffleVector
    BuildExtractValue = lib.LLVMBuildExtractValue
    BuildInsertValue = lib.LLVMBuildInsertValue
    BuildFreeze = lib.LLVMBuildFreeze
    BuildIsNull = lib.LLVMBuildIsNull
    BuildIsNotNull = lib.LLVMBuildIsNotNull
    BuildPtrDiff2 = lib.LLVMBuildPtrDiff2
    BuildFence = lib.LLVMBuildFence
    BuildAtomicRMW = lib.LLVMBuildAtomicRMW
    BuildAtomicCmpXchg = lib.LLVMBuildAtomicCmpXchg
    GetNumMaskElements = lib.LLVMGetNumMaskElements
    GetUndefMaskElem = lib.LLVMGetUndefMaskElem
    GetMaskValue = lib.LLVMGetMaskValue
    IsAtomicSingleThread = lib.LLVMIsAtomicSingleThread
    SetAtomicSingleThread = lib.LLVMSetAtomicSingleThread
    GetCmpXchgSuccessOrdering = lib.LLVMGetCmpXchgSuccessOrdering
    SetCmpXchgSuccessOrdering = lib.LLVMSetCmpXchgSuccessOrdering
    GetCmpXchgFailureOrdering = lib.LLVMGetCmpXchgFailureOrdering
    SetCmpXchgFailureOrdering = lib.LLVMSetCmpXchgFailureOrdering
    CreateModuleProviderForExistingModule = lib.LLVMCreateModuleProviderForExistingModule
    DisposeModuleProvider = lib.LLVMDisposeModuleProvider
    CreateMemoryBufferWithContentsOfFile = lib.LLVMCreateMemoryBufferWithContentsOfFile
    CreateMemoryBufferWithSTDIN = lib.LLVMCreateMemoryBufferWithSTDIN
    CreateMemoryBufferWithMemoryRange = lib.LLVMCreateMemoryBufferWithMemoryRange
    CreateMemoryBufferWithMemoryRangeCopy = lib.LLVMCreateMemoryBufferWithMemoryRangeCopy
    GetBufferStart = lib.LLVMGetBufferStart
    GetBufferSize = lib.LLVMGetBufferSize
    DisposeMemoryBuffer = lib.LLVMDisposeMemoryBuffer
    CreatePassManager = lib.LLVMCreatePassManager
    CreateFunctionPassManagerForModule = lib.LLVMCreateFunctionPassManagerForModule
    CreateFunctionPassManager = lib.LLVMCreateFunctionPassManager
    RunPassManager = lib.LLVMRunPassManager
    InitializeFunctionPassManager = lib.LLVMInitializeFunctionPassManager
    RunFunctionPassManager = lib.LLVMRunFunctionPassManager
    FinalizeFunctionPassManager = lib.LLVMFinalizeFunctionPassManager
    DisposePassManager = lib.LLVMDisposePassManager
    StartMultithreaded = lib.LLVMStartMultithreaded
    StopMultithreaded = lib.LLVMStopMultithreaded
    IsMultithreaded = lib.LLVMIsMultithreaded
    CreateBinary = lib.LLVMCreateBinary
    DisposeBinary = lib.LLVMDisposeBinary
    BinaryCopyMemoryBuffer = lib.LLVMBinaryCopyMemoryBuffer
    BinaryGetType = lib.LLVMBinaryGetType
    MachOUniversalBinaryCopyObjectForArch = lib.LLVMMachOUniversalBinaryCopyObjectForArch
    ObjectFileCopySectionIterator = lib.LLVMObjectFileCopySectionIterator
    ObjectFileIsSectionIteratorAtEnd = lib.LLVMObjectFileIsSectionIteratorAtEnd
    ObjectFileCopySymbolIterator = lib.LLVMObjectFileCopySymbolIterator
    ObjectFileIsSymbolIteratorAtEnd = lib.LLVMObjectFileIsSymbolIteratorAtEnd
    DisposeSectionIterator = lib.LLVMDisposeSectionIterator
    MoveToNextSection = lib.LLVMMoveToNextSection
    MoveToContainingSection = lib.LLVMMoveToContainingSection
    DisposeSymbolIterator = lib.LLVMDisposeSymbolIterator
    MoveToNextSymbol = lib.LLVMMoveToNextSymbol
    GetSectionName = lib.LLVMGetSectionName
    GetSectionSize = lib.LLVMGetSectionSize
    GetSectionContents = lib.LLVMGetSectionContents
    GetSectionAddress = lib.LLVMGetSectionAddress
    GetSectionContainsSymbol = lib.LLVMGetSectionContainsSymbol
    GetRelocations = lib.LLVMGetRelocations
    DisposeRelocationIterator = lib.LLVMDisposeRelocationIterator
    IsRelocationIteratorAtEnd = lib.LLVMIsRelocationIteratorAtEnd
    MoveToNextRelocation = lib.LLVMMoveToNextRelocation
    GetSymbolName = lib.LLVMGetSymbolName
    GetSymbolAddress = lib.LLVMGetSymbolAddress
    GetSymbolSize = lib.LLVMGetSymbolSize
    GetRelocationOffset = lib.LLVMGetRelocationOffset
    GetRelocationSymbol = lib.LLVMGetRelocationSymbol
    GetRelocationType = lib.LLVMGetRelocationType
    GetRelocationTypeName = lib.LLVMGetRelocationTypeName
    GetRelocationValueString = lib.LLVMGetRelocationValueString
    CreateObjectFile = lib.LLVMCreateObjectFile
    DisposeObjectFile = lib.LLVMDisposeObjectFile
    GetSections = lib.LLVMGetSections
    IsSectionIteratorAtEnd = lib.LLVMIsSectionIteratorAtEnd
    GetSymbols = lib.LLVMGetSymbols
    IsSymbolIteratorAtEnd = lib.LLVMIsSymbolIteratorAtEnd
    return lib

-- Macros
var Root.GCC_HAVE_DWARF2_CFI_ASM int = 1
var Root.DEFAULT_TARGET_TRIPLE string = "arm64-apple-darwin22.6.0"
var Root.ENABLE_THREADS int = 1
var Root.HAS_ATOMICS int = 1
var Root.HOST_TRIPLE string = "arm64-apple-darwin22.6.0"
var Root.ON_UNIX int = 1
var Root.USE_INTEL_JITEVENTS int = 0
var Root.USE_OPROFILE int = 0
var Root.USE_PERF int = 0
var Root.VERSION_MAJOR int = 17
var Root.VERSION_MINOR int = 0
var Root.VERSION_PATCH int = 6
var Root.VERSION_STRING string = "17.0.6"
var Root.FORCE_ENABLE_STATS int = 0
var Root.WITH_Z3 int = 1
var Root.ENABLE_ZLIB int = 1
var Root.ENABLE_ZSTD int = 1
var Root.HAVE_SYSEXITS_H int = 1
var Root.HAVE_LIBXAR int = 1
var Root.UNREACHABLE_OPTIMIZE int = 1
var Root.ENABLE_DIA_SDK int = 0
