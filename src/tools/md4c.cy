-- ./src/tools/cbindgen.cy -o src/tools/md4c.cy ~/repos/md4c/src/md4c.h -I/opt/homebrew/Cellar/llvm/17.0.5/include -libpath libmd4c.dylib -stripPrefix MD

var Root.libPath = switch os.system:
case 'linux' => 'libmd4c.so'
case 'windows' => 'md4c.dll'
case 'macos' => 'libmd4c.dylib'
else => throw error.Unsupported

-- CBINDGEN MARKER
-- Code below is generated by cbindgen.cy
type CHAR int

type SIZE int

type OFFSET int

type BLOCKTYPE int
var Root.BLOCK_DOC int = 0
var Root.BLOCK_QUOTE int = 1
var Root.BLOCK_UL int = 2
var Root.BLOCK_OL int = 3
var Root.BLOCK_LI int = 4
var Root.BLOCK_HR int = 5
var Root.BLOCK_H int = 6
var Root.BLOCK_CODE int = 7
var Root.BLOCK_HTML int = 8
var Root.BLOCK_P int = 9
var Root.BLOCK_TABLE int = 10
var Root.BLOCK_THEAD int = 11
var Root.BLOCK_TBODY int = 12
var Root.BLOCK_TR int = 13
var Root.BLOCK_TH int = 14
var Root.BLOCK_TD int = 15

type SPANTYPE int
var Root.SPAN_EM int = 0
var Root.SPAN_STRONG int = 1
var Root.SPAN_A int = 2
var Root.SPAN_IMG int = 3
var Root.SPAN_CODE int = 4
var Root.SPAN_DEL int = 5
var Root.SPAN_LATEXMATH int = 6
var Root.SPAN_LATEXMATH_DISPLAY int = 7
var Root.SPAN_WIKILINK int = 8
var Root.SPAN_U int = 9

type TEXTTYPE int
var Root.TEXT_NORMAL int = 0
var Root.TEXT_NULLCHAR int = 1
var Root.TEXT_BR int = 2
var Root.TEXT_SOFTBR int = 3
var Root.TEXT_ENTITY int = 4
var Root.TEXT_CODE int = 5
var Root.TEXT_HTML int = 6
var Root.TEXT_LATEXMATH int = 7

type ALIGN int
var Root.ALIGN_DEFAULT int = 0
var Root.ALIGN_LEFT int = 1
var Root.ALIGN_CENTER int = 2
var Root.ALIGN_RIGHT int = 3

type ATTRIBUTE_S object:
    var text any -- const MD_CHAR *
    var size SIZE
    var substr_types any -- const MD_TEXTTYPE *
    var substr_offsets any -- const MD_OFFSET *

type ATTRIBUTE ATTRIBUTE_S

type BLOCK_UL_DETAIL_S object:
    var is_tight int
    var mark CHAR

type BLOCK_UL_DETAIL BLOCK_UL_DETAIL_S

type BLOCK_OL_DETAIL_S object:
    var start int
    var is_tight int
    var mark_delimiter CHAR

type BLOCK_OL_DETAIL BLOCK_OL_DETAIL_S

type BLOCK_LI_DETAIL_S object:
    var is_task int
    var task_mark CHAR
    var task_mark_offset OFFSET

type BLOCK_LI_DETAIL BLOCK_LI_DETAIL_S

type BLOCK_H_DETAIL_S object:
    var level int

type BLOCK_H_DETAIL BLOCK_H_DETAIL_S

type BLOCK_CODE_DETAIL_S object:
    var info ATTRIBUTE
    var lang ATTRIBUTE
    var fence_char CHAR

type BLOCK_CODE_DETAIL BLOCK_CODE_DETAIL_S

type BLOCK_TABLE_DETAIL_S object:
    var col_count int
    var head_row_count int
    var body_row_count int

type BLOCK_TABLE_DETAIL BLOCK_TABLE_DETAIL_S

type BLOCK_TD_DETAIL_S object:
    var align ALIGN

type BLOCK_TD_DETAIL BLOCK_TD_DETAIL_S

type SPAN_A_DETAIL_S object:
    var href ATTRIBUTE
    var title ATTRIBUTE

type SPAN_A_DETAIL SPAN_A_DETAIL_S

type SPAN_IMG_DETAIL_S object:
    var src ATTRIBUTE
    var title ATTRIBUTE

type SPAN_IMG_DETAIL SPAN_IMG_DETAIL_S

type SPAN_WIKILINK_S object:
    var target ATTRIBUTE

type SPAN_WIKILINK_DETAIL SPAN_WIKILINK_S

type PARSER_S object:
    var abi_version int
    var flags int
    var enter_block any -- int (*)(MD_BLOCKTYPE, void *, void *)
    var leave_block any -- int (*)(MD_BLOCKTYPE, void *, void *)
    var enter_span any -- int (*)(MD_SPANTYPE, void *, void *)
    var leave_span any -- int (*)(MD_SPANTYPE, void *, void *)
    var text any -- int (*)(MD_TEXTTYPE, const MD_CHAR *, MD_SIZE, void *)
    var debug_log any -- void (*)(const char *, void *)
    var syntax any -- void (*)(void)

type PARSER PARSER_S

type RENDERER PARSER

func md_parse(text any, size SIZE, parser any, userdata any) int: pass

import os
my Root.ffi = none
my Root.lib = load()
func load():
    ffi = os.newFFI()
    ffi.cbind(ATTRIBUTE_S, [.voidPtr, .uint, .voidPtr, .voidPtr])
    ffi.cbind(BLOCK_UL_DETAIL_S, [.int, .char])
    ffi.cbind(BLOCK_OL_DETAIL_S, [.uint, .int, .char])
    ffi.cbind(BLOCK_LI_DETAIL_S, [.int, .char, .uint])
    ffi.cbind(BLOCK_H_DETAIL_S, [.uint])
    ffi.cbind(BLOCK_CODE_DETAIL_S, [ATTRIBUTE, ATTRIBUTE, .char])
    ffi.cbind(BLOCK_TABLE_DETAIL_S, [.uint, .uint, .uint])
    ffi.cbind(BLOCK_TD_DETAIL_S, [.int])
    ffi.cbind(SPAN_A_DETAIL_S, [ATTRIBUTE, ATTRIBUTE])
    ffi.cbind(SPAN_IMG_DETAIL_S, [ATTRIBUTE, ATTRIBUTE])
    ffi.cbind(SPAN_WIKILINK_S, [ATTRIBUTE])
    ffi.cbind(PARSER_S, [.uint, .uint, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr, .voidPtr])
    ffi.cfunc('md_parse', [.voidPtr, .uint, .voidPtr, .voidPtr], .int)
    my lib = ffi.bindLib(libPath, [genMap: true])
    md_parse = lib.md_parse
    return lib

-- Macros
var Root.GCC_HAVE_DWARF2_CFI_ASM int = 1
var Root.FLAG_COLLAPSEWHITESPACE int = 1
var Root.FLAG_PERMISSIVEATXHEADERS int = 2
var Root.FLAG_PERMISSIVEURLAUTOLINKS int = 4
var Root.FLAG_PERMISSIVEEMAILAUTOLINKS int = 8
var Root.FLAG_NOINDENTEDCODEBLOCKS int = 16
var Root.FLAG_NOHTMLBLOCKS int = 32
var Root.FLAG_NOHTMLSPANS int = 64
var Root.FLAG_TABLES int = 256
var Root.FLAG_STRIKETHROUGH int = 512
var Root.FLAG_PERMISSIVEWWWAUTOLINKS int = 1024
var Root.FLAG_TASKLISTS int = 2048
var Root.FLAG_LATEXMATHSPANS int = 4096
var Root.FLAG_WIKILINKS int = 8192
var Root.FLAG_UNDERLINE int = 16384
var Root.FLAG_PERMISSIVEAUTOLINKS int = 1036
var Root.FLAG_NOHTML int = 96
var Root.DIALECT_COMMONMARK int = 0
var Root.DIALECT_GITHUB int = 3852
