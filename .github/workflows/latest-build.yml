name: Latest Build

on: 
  workflow_dispatch:
    inputs:
      deps_rev_override:
        description: 'Deps Revision Override'
        type: string
        default: ''
        required: false
  push:
    branches:
      - master
    paths-ignore:
      - '.github/**'
      - '**.md'
      - '.gitattributes'
      - 'examples/**.cy'
# Cancel previous job if it's running.
concurrency:
  group: latest
  cancel-in-progress: true
jobs:  
  build:
    name: host=${{ matrix.config.host }} target=${{ matrix.config.target }} mode=${{ matrix.config.mode }}
    runs-on: ${{ matrix.config.host }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - host: ubuntu-22.04
            target: x86_64-linux-gnu
            mode: release
          - host: ubuntu-22.04
            target: x86_64-selinux-gnu
            mode: release
          - host: macos-12
            target: x86_64-macos.12-none
            mode: release
          - host: macos-12
            target: aarch64-macos.12-none
            mode: release
          - host: ubuntu-22.04
            target: wasm32-freestanding
            mode: release
          #- host: windows-2019
          #  target: x86_64-windows-gnu
          #  mode: release
          # - host: windows-2019
          #  target: x86_64-windows-msvc
          #  mode: release
    env:
      BIN_ZIP: >-
        ${{ fromJson('{
          "x86_64-windows-gnu": "cyber-windows-x64.zip",
          "x86_64-linux-gnu": "cyber-linux-x64.zip",
          "x86_64-selinux-gnu": "cyber-selinux-x64.zip",
          "x86_64-macos.12-none": "cyber-macos-x64.zip",
          "aarch64-macos.12-none": "cyber-macos-arm64.zip",
          "wasm32-freestanding": "cyber.wasm",
        }')[matrix.config.target] }}
      ZIG_TARGET_FLAG: >-
        ${{ fromJson('{
          "x86_64-windows-gnu": "-Dtarget=x86_64-windows-gnu -Dcpu=baseline",
          "x86_64-linux-gnu": "-Dtarget=x86_64-linux-gnu -Dcpu=baseline",
          "x86_64-selinux-gnu": "-Dtarget=x86_64-linux-gnu -Dcpu=baseline -Dselinux",
          "x86_64-macos.12-none": "-Dtarget=x86_64-macos.12-none -Dcpu=baseline",
          "aarch64-macos.12-none": "-Dtarget=aarch64-macos.12-none -Dcpu=baseline",
          "wasm32-freestanding": "-Dtarget=wasm32-freestanding",
        }')[matrix.config.target] }}
      BUILD_HOST: ${{ matrix.config.host }}
      BUILD_TARGET: ${{ matrix.config.target }}
      BUILD_MODE: ${{ matrix.config.mode }}
      BIN_NAME: cyber
      BIN_EXT: ${{ contains(matrix.config.target, 'windows') && '.exe' || '' }}
      ZIG_MODE_FLAG: ${{ (matrix.config.mode == 'release' && '-Drelease-fast') || '' }}
    steps:
      - name: Install Linux deps.
        if: env.BUILD_HOST == 'ubuntu-22.04' && env.BUILD_TARGET == 'x86_64-linux-gnu'
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
          sudo apt-get update -y -qq
          sudo apt-get install xz-utils

      - name: Setup WSL (windows)
        if: env.BUILD_TARGET == 'x86_64-windows-gnu'
        uses: Vampire/setup-wsl@v1
        with:
          additional-packages: wget tar xz-utils zip

      - name: Clone repo.
        uses: actions/checkout@v2
        with:
          # Fetch all so commit count can be computed from tag.
          fetch-depth: 0
          #submodules: recursive

      - name: Install zig.
        if: env.BUILD_HOST == 'ubuntu-22.04'
        run: |
          wget -c https://ziglang.org/builds/zig-linux-x86_64-0.11.0-dev.1465+d64dd75e3.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin

      - name: Install wasm3.
        if: env.BUILD_HOST == 'ubuntu-22.04' && env.BUILD_TARGET == 'wasm32-freestanding'
        run: |
          git clone --depth=1 https://github.com/wasm3/wasm3.git
          cd wasm3 && zig build

      - name: Install zig.
        if: env.BUILD_HOST == 'macos-12'
        run: |
          wget -c https://ziglang.org/builds/zig-macos-x86_64-0.11.0-dev.1465+d64dd75e3.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin
          xcode-select --print-path

      - name: Setup script.
        uses: actions/github-script@v5
        with:
          script: |
            core.exportVariable('COMMIT', context.sha.substring(0, 7))

      - name: Get version.
        if: env.BUILD_HOST == 'ubuntu-22.04' || env.BUILD_HOST == 'macos-12'
        run: |
          version=$(zig build version)
          echo "SHORT_VERSION=$version" >> $GITHUB_ENV
          git fetch --all --tags
          echo "BUILD=$(git rev-list --count $version-init..master)" >> $GITHUB_ENV

      - name: Get version. (windows)
        if: env.BUILD_HOST == 'windows-2019'
        run: |
          version=$(zig build version)
          echo "SHORT_VERSION=$version" >> $env:GITHUB_ENV
          git fetch --all --tags
          echo "BUILD=$(git rev-list --count $version-init..master)" >> $env:GITHUB_ENV

      - name: Cache.
        # Don't cache for windows, since there are issues with subsequent builds. Check to re-enable this later.
        if: env.BUILD_TARGET != 'x86_64-windows-gnu'
        uses: actions/cache@v2
        with:
          path: |-
            ~/.cache/zig
            zig-cache
            ~/AppData/Local/zig
          key:
            build-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-1
          restore-keys:
            build-${{ env.BUILD_TARGET }}-${{ env.BUILD_MODE }}-1

      - name: Run tests.
        if: env.BUILD_TARGET != 'wasm32-freestanding'
        #run: zig build test ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }} 
        run: zig build test ${{ env.ZIG_TARGET_FLAG }} 

      - name: Run tests.
        if: env.BUILD_TARGET == 'wasm32-freestanding'
        run: |
          zig build wasm-test ${{ env.ZIG_TARGET_FLAG }} ${{ env.ZIG_MODE_FLAG }} 
          wasm3/zig-out/bin/wasm3 zig-out/test/test.wasm

      - name: Build.
        if: env.BUILD_TARGET != 'wasm32-freestanding'
        run: zig build cli ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      - name: Build.
        if: env.BUILD_TARGET == 'wasm32-freestanding'
        run: zig build lib ${{ env.ZIG_MODE_FLAG }} ${{ env.ZIG_TARGET_FLAG }}

      # Remove when zig strip is fixed.
      - name: Strip (Linux)
        if: env.BUILD_TARGET == 'x86_64-linux-gnu' && env.BUILD_MODE == 'release'
        run: |
          strip zig-out/cyber/cyber

      # # Don't strip aarch64 since it was already code signed.
      # # TODO: Look for way to make zig strip before doing the codesign.
      # - name: Strip (macOS)
      #   if: env.BUILD_TARGET == 'x86_64-macos.12-none' && env.BUILD_MODE == 'release'
      #   run: |
      #     strip zig-out/${{ env.BUILD_TARGET }}/main/main

      # # Currently just ad hoc signing.
      # # aarch64 build is automatically signed by zig.
      # - name: Codesign (macOS)
      #   if: env.BUILD_TARGET == 'x86_64-macos.12-none' && env.BUILD_MODE == 'release'
      #   run: |
      #     codesign --force --deep -s - zig-out/${{ env.BUILD_TARGET }}/main/main

      # - name: Copy binary.
      #   run: cp
      #     zig-out/${{ env.BUILD_TARGET }}/main/main${{ env.BIN_EXT }}
      #     zig-out/${{ env.BUILD_TARGET }}/main/cosmic${{ env.BIN_EXT }}

      - name: Zip. (linux/macos)
        if: (env.BUILD_HOST == 'ubuntu-22.04' || env.BUILD_HOST == 'macos-12') && env.BUILD_TARGET != 'wasm32-freestanding'
        run: |
           (cd zig-out/cyber && zip - cyber${{env.BIN_EXT}}) > ${{ env.BIN_ZIP }}

      - name: Zip. (windows)
        if: env.BUILD_HOST == 'windows-2019' && env.BUILD_TARGET != 'wasm32-freestanding'
        shell: wsl-bash {0}
        run: |
          (cd zig-out/cyber && zip - cyber${{env.BIN_EXT}}) > ${{ env.BIN_ZIP }}

      - name: Move. (wasm)
        if: env.BUILD_TARGET == 'wasm32-freestanding'
        run: |
          mv zig-out/lib/cyber.wasm ${{ env.BIN_ZIP }}

      - name: Save artifact.
        uses: actions/upload-artifact@v2
        with:
          name: bin
          path: |
            ${{ env.BIN_ZIP }}

    outputs:
      short_version: ${{ env.SHORT_VERSION }}
    #  version: ${{ env.BUILD_VERSION }}

  release:
    needs: build
    name: Release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: bin

      - name: Github Release.
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: latest
          prerelease: false
          title: v${{ needs.build.outputs.short_version }}-Latest
          files: |
            cyber-linux-x64.zip
            cyber-selinux-x64.zip
            cyber-macos-x64.zip
            cyber-macos-arm64.zip
            cyber.wasm
